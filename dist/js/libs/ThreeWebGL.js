var THREE=THREE||{REVISION:"48"};self.Int32Array||(self.Int32Array=Array,self.Float32Array=Array),function(){for(var e=0,t=["ms","moz","webkit","o"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var n=(new Date).getTime(),r=Math.max(0,16-(n-e)),i=window.setTimeout(function(){t(n+r)},r);return e=n+r,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),THREE.Color=function(e){return void 0!==e&&this.setHex(e),this},THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e){return this.r=e.r*e.r,this.g=e.g*e.g,this.b=e.b*e.b,this},copyLinearToGamma:function(e){return this.r=Math.sqrt(e.r),this.g=Math.sqrt(e.g),this.b=Math.sqrt(e.b),this},convertGammaToLinear:function(){var e=this.r,t=this.g,n=this.b;return this.r=e*e,this.g=t*t,this.b=n*n,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},setRGB:function(e,t,n){return this.r=e,this.g=t,this.b=n,this},setHSV:function(e,t,n){var r,i,s;if(0===n)this.r=this.g=this.b=0;else switch(r=Math.floor(6*e),i=6*e-r,e=n*(1-t),s=n*(1-t*i),t=n*(1-t*(1-i)),r){case 1:this.r=s,this.g=n,this.b=e;break;case 2:this.r=e,this.g=n,this.b=t;break;case 3:this.r=e,this.g=s,this.b=n;break;case 4:this.r=t,this.g=e,this.b=n;break;case 5:this.r=n,this.g=e,this.b=s;break;case 6:case 0:this.r=n,this.g=t,this.b=e}return this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,this},getHex:function(){return Math.floor(255*this.r)<<16^Math.floor(255*this.g)<<8^Math.floor(255*this.b)},getContextStyle:function(){return"rgb("+Math.floor(255*this.r)+","+Math.floor(255*this.g)+","+Math.floor(255*this.b)+")"},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}},THREE.Vector2=function(e,t){this.x=e||0,this.y=t||0},THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(e,t){return this.x=e,this.y=t,this},copy:function(e){return this.x=e.x,this.y=e.y,this},clone:function(){return new THREE.Vector2(this.x,this.y)},add:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addSelf:function(e){return this.x+=e.x,this.y+=e.y,this},sub:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},subSelf:function(e){return this.x-=e.x,this.y-=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divideScalar:function(e){return e?(this.x/=e,this.y/=e):this.set(0,0),this},negate:function(){return this.multiplyScalar(-1)},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,e=this.y-e.y;return t*t+e*e},setLength:function(e){return this.normalize().multiplyScalar(e)},lerpSelf:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},equals:function(e){return e.x===this.x&&e.y===this.y},isZero:function(){return 1e-4>this.lengthSq()}},THREE.Vector3=function(e,t,n){this.x=e||0,this.y=t||0,this.z=n||0},THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(e,t,n){return this.x=e,this.y=t,this.z=n,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)},add:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addSelf:function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},sub:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},subSelf:function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this},multiply:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},multiplySelf:function(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},divideSelf:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return e?(this.x/=e,this.y/=e,this.z/=e):this.z=this.y=this.x=0,this},negate:function(){return this.multiplyScalar(-1)},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.lengthSq())},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.normalize().multiplyScalar(e)},lerpSelf:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},cross:function(e,t){return this.x=e.y*t.z-e.z*t.y,this.y=e.z*t.x-e.x*t.z,this.z=e.x*t.y-e.y*t.x,this},crossSelf:function(e){var t=this.x,n=this.y,r=this.z;return this.x=n*e.z-r*e.y,this.y=r*e.x-t*e.z,this.z=t*e.y-n*e.x,this},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){return(new THREE.Vector3).sub(this,e).lengthSq()},getPositionFromMatrix:function(e){return this.x=e.n14,this.y=e.n24,this.z=e.n34,this},getRotationFromMatrix:function(e,t){var n=t?t.x:1,r=t?t.y:1,i=t?t.z:1,s=e.n11/n,o=e.n12/r,n=e.n21/n,r=e.n22/r,u=e.n23/i,a=e.n33/i;return this.y=Math.asin(e.n13/i),i=Math.cos(this.y),1e-5<Math.abs(i)?(this.x=Math.atan2(-u/i,a/i),this.z=Math.atan2(-o/i,s/i)):(this.x=0,this.z=Math.atan2(n,r)),this},getScaleFromMatrix:function(e){var t=this.set(e.n11,e.n21,e.n31).length(),n=this.set(e.n12,e.n22,e.n32).length(),e=this.set(e.n13,e.n23,e.n33).length();this.x=t,this.y=n,this.z=e},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},isZero:function(){return 1e-4>this.lengthSq()}},THREE.Vector4=function(e,t,n,r){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==r?r:1},THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)},add:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addSelf:function(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this},sub:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},subSelf:function(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},divideScalar:function(e){return e?(this.x/=e,this.y/=e,this.z/=e,this.w/=e):(this.z=this.y=this.x=0,this.w=1),this},negate:function(){return this.multiplyScalar(-1)},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.dot(this)},length:function(){return Math.sqrt(this.lengthSq())},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.normalize().multiplyScalar(e)},lerpSelf:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}},THREE.Frustum=function(){this.planes=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4]},THREE.Frustum.prototype.setFromMatrix=function(e){var t,n=this.planes;n[0].set(e.n41-e.n11,e.n42-e.n12,e.n43-e.n13,e.n44-e.n14),n[1].set(e.n41+e.n11,e.n42+e.n12,e.n43+e.n13,e.n44+e.n14),n[2].set(e.n41+e.n21,e.n42+e.n22,e.n43+e.n23,e.n44+e.n24),n[3].set(e.n41-e.n21,e.n42-e.n22,e.n43-e.n23,e.n44-e.n24),n[4].set(e.n41-e.n31,e.n42-e.n32,e.n43-e.n33,e.n44-e.n34),n[5].set(e.n41+e.n31,e.n42+e.n32,e.n43+e.n33,e.n44+e.n34);for(e=0;6>e;e++)t=n[e],t.divideScalar(Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z))},THREE.Frustum.prototype.contains=function(e){for(var t=this.planes,n=e.matrixWorld,r=THREE.Frustum.__v1.set(n.getColumnX().length(),n.getColumnY().length(),n.getColumnZ().length()),r=-e.geometry.boundingSphere.radius*Math.max(r.x,Math.max(r.y,r.z)),i=0;6>i;i++)if(e=t[i].x*n.n14+t[i].y*n.n24+t[i].z*n.n34+t[i].w,e<=r)return!1;return!0},THREE.Frustum.__v1=new THREE.Vector3,THREE.Ray=function(e,t){function n(e,t,n){return d.sub(n,e),g=d.dot(t),y=v.add(e,m.copy(t).multiplyScalar(g)),b=n.distanceTo(y)}function r(e,t,n,r){return d.sub(r,t),v.sub(n,t),m.sub(e,t),w=d.dot(d),E=d.dot(v),S=d.dot(m),x=v.dot(v),T=v.dot(m),N=1/(w*x-E*E),C=(x*S-E*T)*N,k=(w*T-E*S)*N,0<=C&&0<=k&&1>C+k}this.origin=e||new THREE.Vector3,this.direction=t||new THREE.Vector3,this.intersectObjects=function(e){var t,n,r=[];for(t=0,n=e.length;t<n;t++)Array.prototype.push.apply(r,this.intersectObject(e[t]));return r.sort(function(e,t){return e.distance-t.distance}),r};var i=1e-4;this.setPrecision=function(e){i=e};var s=new THREE.Vector3,o=new THREE.Vector3,u=new THREE.Vector3,a=new THREE.Vector3,f=new THREE.Vector3,l=new THREE.Vector3,c=new THREE.Vector3,h=new THREE.Vector3,p=new THREE.Vector3;this.intersectObject=function(e){var t,d=[];if(e instanceof THREE.Particle){var v=n(this.origin,this.direction,e.matrixWorld.getPosition());if(v>e.scale.x)return[];t={distance:v,point:e.position,face:null,object:e},d.push(t)}else if(e instanceof THREE.Mesh){var v=n(this.origin,this.direction,e.matrixWorld.getPosition()),m=THREE.Frustum.__v1.set(e.matrixWorld.getColumnX().length(),e.matrixWorld.getColumnY().length(),e.matrixWorld.getColumnZ().length());if(v>e.geometry.boundingSphere.radius*Math.max(m.x,Math.max(m.y,m.z)))return d;var g,y,b=e.geometry,w=b.vertices,E;e.matrixRotationWorld.extractRotation(e.matrixWorld);for(v=0,m=b.faces.length;v<m;v++)if(t=b.faces[v],f.copy(this.origin),l.copy(this.direction),E=e.matrixWorld,c=E.multiplyVector3(c.copy(t.centroid)).subSelf(f),h=e.matrixRotationWorld.multiplyVector3(h.copy(t.normal)),g=l.dot(h),!(Math.abs(g)<i)&&(y=h.dot(c)/g,!(0>y)&&(e.doubleSided||(e.flipSided?0<g:0>g))))(p.add(f,l.multiplyScalar(y)),t instanceof THREE.Face3)?(s=E.multiplyVector3(s.copy(w[t.a].position)),o=E.multiplyVector3(o.copy(w[t.b].position)),u=E.multiplyVector3(u.copy(w[t.c].position)),r(p,s,o,u)&&(t={distance:f.distanceTo(p),point:p.clone(),face:t,object:e},d.push(t))):t instanceof THREE.Face4&&(s=E.multiplyVector3(s.copy(w[t.a].position)),o=E.multiplyVector3(o.copy(w[t.b].position)),u=E.multiplyVector3(u.copy(w[t.c].position)),a=E.multiplyVector3(a.copy(w[t.d].position)),r(p,s,o,a)||r(p,o,u,a))&&(t={distance:f.distanceTo(p),point:p.clone(),face:t,object:e},d.push(t))}return d};var d=new THREE.Vector3,v=new THREE.Vector3,m=new THREE.Vector3,g,y,b,w,E,S,x,T,N,C,k},THREE.Rectangle=function(){function e(){s=r-t,o=i-n}var t,n,r,i,s,o,u=!0;this.getX=function(){return t},this.getY=function(){return n},this.getWidth=function(){return s},this.getHeight=function(){return o},this.getLeft=function(){return t},this.getTop=function(){return n},this.getRight=function(){return r},this.getBottom=function(){return i},this.set=function(s,o,f,l){u=!1,t=s,n=o,r=f,i=l,e()},this.addPoint=function(s,o){u?(u=!1,t=s,n=o,r=s,i=o):(t=t<s?t:s,n=n<o?n:o,r=r>s?r:s,i=i>o?i:o),e()},this.add3Points=function(s,o,f,l,h,p){u?(u=!1,t=s<f?s<h?s:h:f<h?f:h,n=o<l?o<p?o:p:l<p?l:p,r=s>f?s>h?s:h:f>h?f:h,i=o>l?o>p?o:p:l>p?l:p):(t=s<f?s<h?s<t?s:t:h<t?h:t:f<h?f<t?f:t:h<t?h:t,n=o<l?o<p?o<n?o:n:p<n?p:n:l<p?l<n?l:n:p<n?p:n,r=s>f?s>h?s>r?s:r:h>r?h:r:f>h?f>r?f:r:h>r?h:r,i=o>l?o>p?o>i?o:i:p>i?p:i:l>p?l>i?l:i:p>i?p:i),e()},this.addRectangle=function(s){u?(u=!1,t=s.getLeft(),n=s.getTop(),r=s.getRight(),i=s.getBottom()):(t=t<s.getLeft()?t:s.getLeft(),n=n<s.getTop()?n:s.getTop(),r=r>s.getRight()?r:s.getRight(),i=i>s.getBottom()?i:s.getBottom()),e()},this.inflate=function(s){t-=s,n-=s,r+=s,i+=s,e()},this.minSelf=function(s){t=t>s.getLeft()?t:s.getLeft(),n=n>s.getTop()?n:s.getTop(),r=r<s.getRight()?r:s.getRight(),i=i<s.getBottom()?i:s.getBottom(),e()},this.intersects=function(e){return r<e.getLeft()||t>e.getRight()||i<e.getTop()||n>e.getBottom()?!1:!0},this.empty=function(){u=!0,i=r=n=t=0,e()},this.isEmpty=function(){return u}},THREE.Math={clamp:function(e,t,n){return e<t?t:e>n?n:e},clampBottom:function(e,t){return e<t?t:e},mapLinear:function(e,t,n,r,i){return r+(e-t)*(i-r)/(n-t)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},sign:function(e){return 0>e?-1:0<e?1:0}},THREE.Matrix3=function(){this.m=[]},THREE.Matrix3.prototype={constructor:THREE.Matrix3,transposeIntoArray:function(e){var t=this.m;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}},THREE.Matrix4=function(e,t,n,r,i,s,o,u,a,f,l,c,h,p,d,v){this.set(void 0!==e?e:1,t||0,n||0,r||0,i||0,void 0!==s?s:1,o||0,u||0,a||0,f||0,void 0!==l?l:1,c||0,h||0,p||0,d||0,void 0!==v?v:1),this.m33=new THREE.Matrix3},THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(e,t,n,r,i,s,o,u,a,f,l,c,h,p,d,v){return this.n11=e,this.n12=t,this.n13=n,this.n14=r,this.n21=i,this.n22=s,this.n23=o,this.n24=u,this.n31=a,this.n32=f,this.n33=l,this.n34=c,this.n41=h,this.n42=p,this.n43=d,this.n44=v,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},copy:function(e){return this.set(e.n11,e.n12,e.n13,e.n14,e.n21,e.n22,e.n23,e.n24,e.n31,e.n32,e.n33,e.n34,e.n41,e.n42,e.n43,e.n44),this},lookAt:function(e,t,n){var r=THREE.Matrix4.__v1,i=THREE.Matrix4.__v2,s=THREE.Matrix4.__v3;return s.sub(e,t).normalize(),0===s.length()&&(s.z=1),r.cross(n,s).normalize(),0===r.length()&&(s.x+=1e-4,r.cross(n,s).normalize()),i.cross(s,r),this.n11=r.x,this.n12=i.x,this.n13=s.x,this.n21=r.y,this.n22=i.y,this.n23=s.y,this.n31=r.z,this.n32=i.z,this.n33=s.z,this},multiply:function(e,t){var n=e.n11,r=e.n12,i=e.n13,s=e.n14,o=e.n21,u=e.n22,a=e.n23,f=e.n24,l=e.n31,c=e.n32,h=e.n33,p=e.n34,d=e.n41,v=e.n42,m=e.n43,g=e.n44,y=t.n11,b=t.n12,w=t.n13,E=t.n14,S=t.n21,x=t.n22,T=t.n23,N=t.n24,C=t.n31,k=t.n32,L=t.n33,A=t.n34,O=t.n41,M=t.n42,_=t.n43,D=t.n44;return this.n11=n*y+r*S+i*C+s*O,this.n12=n*b+r*x+i*k+s*M,this.n13=n*w+r*T+i*L+s*_,this.n14=n*E+r*N+i*A+s*D,this.n21=o*y+u*S+a*C+f*O,this.n22=o*b+u*x+a*k+f*M,this.n23=o*w+u*T+a*L+f*_,this.n24=o*E+u*N+a*A+f*D,this.n31=l*y+c*S+h*C+p*O,this.n32=l*b+c*x+h*k+p*M,this.n33=l*w+c*T+h*L+p*_,this.n34=l*E+c*N+h*A+p*D,this.n41=d*y+v*S+m*C+g*O,this.n42=d*b+v*x+m*k+g*M,this.n43=d*w+v*T+m*L+g*_,this.n44=d*E+v*N+m*A+g*D,this},multiplySelf:function(e){return this.multiply(this,e)},multiplyToArray:function(e,t,n){return this.multiply(e,t),n[0]=this.n11,n[1]=this.n21,n[2]=this.n31,n[3]=this.n41,n[4]=this.n12,n[5]=this.n22,n[6]=this.n32,n[7]=this.n42,n[8]=this.n13,n[9]=this.n23,n[10]=this.n33,n[11]=this.n43,n[12]=this.n14,n[13]=this.n24,n[14]=this.n34,n[15]=this.n44,this},multiplyScalar:function(e){return this.n11*=e,this.n12*=e,this.n13*=e,this.n14*=e,this.n21*=e,this.n22*=e,this.n23*=e,this.n24*=e,this.n31*=e,this.n32*=e,this.n33*=e,this.n34*=e,this.n41*=e,this.n42*=e,this.n43*=e,this.n44*=e,this},multiplyVector3:function(e){var t=e.x,n=e.y,r=e.z,i=1/(this.n41*t+this.n42*n+this.n43*r+this.n44);return e.x=(this.n11*t+this.n12*n+this.n13*r+this.n14)*i,e.y=(this.n21*t+this.n22*n+this.n23*r+this.n24)*i,e.z=(this.n31*t+this.n32*n+this.n33*r+this.n34)*i,e},multiplyVector4:function(e){var t=e.x,n=e.y,r=e.z,i=e.w;return e.x=this.n11*t+this.n12*n+this.n13*r+this.n14*i,e.y=this.n21*t+this.n22*n+this.n23*r+this.n24*i,e.z=this.n31*t+this.n32*n+this.n33*r+this.n34*i,e.w=this.n41*t+this.n42*n+this.n43*r+this.n44*i,e},rotateAxis:function(e){var t=e.x,n=e.y,r=e.z;return e.x=t*this.n11+n*this.n12+r*this.n13,e.y=t*this.n21+n*this.n22+r*this.n23,e.z=t*this.n31+n*this.n32+r*this.n33,e.normalize(),e},crossVector:function(e){var t=new THREE.Vector4;return t.x=this.n11*e.x+this.n12*e.y+this.n13*e.z+this.n14*e.w,t.y=this.n21*e.x+this.n22*e.y+this.n23*e.z+this.n24*e.w,t.z=this.n31*e.x+this.n32*e.y+this.n33*e.z+this.n34*e.w,t.w=e.w?this.n41*e.x+this.n42*e.y+this.n43*e.z+this.n44*e.w:1,t},determinant:function(){var e=this.n11,t=this.n12,n=this.n13,r=this.n14,i=this.n21,s=this.n22,o=this.n23,u=this.n24,a=this.n31,f=this.n32,l=this.n33,c=this.n34,h=this.n41,p=this.n42,d=this.n43,v=this.n44;return r*o*f*h-n*u*f*h-r*s*l*h+t*u*l*h+n*s*c*h-t*o*c*h-r*o*a*p+n*u*a*p+r*i*l*p-e*u*l*p-n*i*c*p+e*o*c*p+r*s*a*d-t*u*a*d-r*i*f*d+e*u*f*d+t*i*c*d-e*s*c*d-n*s*a*v+t*o*a*v+n*i*f*v-e*o*f*v-t*i*l*v+e*s*l*v},transpose:function(){var e;return e=this.n21,this.n21=this.n12,this.n12=e,e=this.n31,this.n31=this.n13,this.n13=e,e=this.n32,this.n32=this.n23,this.n23=e,e=this.n41,this.n41=this.n14,this.n14=e,e=this.n42,this.n42=this.n24,this.n24=e,e=this.n43,this.n43=this.n34,this.n34=e,this},clone:function(){var e=new THREE.Matrix4;return e.n11=this.n11,e.n12=this.n12,e.n13=this.n13,e.n14=this.n14,e.n21=this.n21,e.n22=this.n22,e.n23=this.n23,e.n24=this.n24,e.n31=this.n31,e.n32=this.n32,e.n33=this.n33,e.n34=this.n34,e.n41=this.n41,e.n42=this.n42,e.n43=this.n43,e.n44=this.n44,e},flattenToArray:function(e){return e[0]=this.n11,e[1]=this.n21,e[2]=this.n31,e[3]=this.n41,e[4]=this.n12,e[5]=this.n22,e[6]=this.n32,e[7]=this.n42,e[8]=this.n13,e[9]=this.n23,e[10]=this.n33,e[11]=this.n43,e[12]=this.n14,e[13]=this.n24,e[14]=this.n34,e[15]=this.n44,e},flattenToArrayOffset:function(e,t){return e[t]=this.n11,e[t+1]=this.n21,e[t+2]=this.n31,e[t+3]=this.n41,e[t+4]=this.n12,e[t+5]=this.n22,e[t+6]=this.n32,e[t+7]=this.n42,e[t+8]=this.n13,e[t+9]=this.n23,e[t+10]=this.n33,e[t+11]=this.n43,e[t+12]=this.n14,e[t+13]=this.n24,e[t+14]=this.n34,e[t+15]=this.n44,e},setTranslation:function(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this},setScale:function(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this},setRotationX:function(e){var t=Math.cos(e),e=Math.sin(e);return this.set(1,0,0,0,0,t,-e,0,0,e,t,0,0,0,0,1),this},setRotationY:function(e){var t=Math.cos(e),e=Math.sin(e);return this.set(t,0,e,0,0,1,0,0,-e,0,t,0,0,0,0,1),this},setRotationZ:function(e){var t=Math.cos(e),e=Math.sin(e);return this.set(t,-e,0,0,e,t,0,0,0,0,1,0,0,0,0,1),this},setRotationAxis:function(e,t){var n=Math.cos(t),r=Math.sin(t),i=1-n,s=e.x,o=e.y,u=e.z,a=i*s,f=i*o;return this.set(a*s+n,a*o-r*u,a*u+r*o,0,a*o+r*u,f*o+n,f*u-r*s,0,a*u-r*o,f*u+r*s,i*u*u+n,0,0,0,0,1),this},setPosition:function(e){return this.n14=e.x,this.n24=e.y,this.n34=e.z,this},getPosition:function(){return THREE.Matrix4.__v1.set(this.n14,this.n24,this.n34)},getColumnX:function(){return THREE.Matrix4.__v1.set(this.n11,this.n21,this.n31)},getColumnY:function(){return THREE.Matrix4.__v1.set(this.n12,this.n22,this.n32)},getColumnZ:function(){return THREE.Matrix4.__v1.set(this.n13,this.n23,this.n33)},getInverse:function(e){var t=e.n11,n=e.n12,r=e.n13,i=e.n14,s=e.n21,o=e.n22,u=e.n23,a=e.n24,f=e.n31,l=e.n32,c=e.n33,h=e.n34,p=e.n41,d=e.n42,v=e.n43,m=e.n44;return this.n11=u*h*d-a*c*d+a*l*v-o*h*v-u*l*m+o*c*m,this.n12=i*c*d-r*h*d-i*l*v+n*h*v+r*l*m-n*c*m,this.n13=r*a*d-i*u*d+i*o*v-n*a*v-r*o*m+n*u*m,this.n14=i*u*l-r*a*l-i*o*c+n*a*c+r*o*h-n*u*h,this.n21=a*c*p-u*h*p-a*f*v+s*h*v+u*f*m-s*c*m,this.n22=r*h*p-i*c*p+i*f*v-t*h*v-r*f*m+t*c*m,this.n23=i*u*p-r*a*p-i*s*v+t*a*v+r*s*m-t*u*m,this.n24=r*a*f-i*u*f+i*s*c-t*a*c-r*s*h+t*u*h,this.n31=o*h*p-a*l*p+a*f*d-s*h*d-o*f*m+s*l*m,this.n32=i*l*p-n*h*p-i*f*d+t*h*d+n*f*m-t*l*m,this.n33=n*a*p-i*o*p+i*s*d-t*a*d-n*s*m+t*o*m,this.n34=i*o*f-n*a*f-i*s*l+t*a*l+n*s*h-t*o*h,this.n41=u*l*p-o*c*p-u*f*d+s*c*d+o*f*v-s*l*v,this.n42=n*c*p-r*l*p+r*f*d-t*c*d-n*f*v+t*l*v,this.n43=r*o*p-n*u*p-r*s*d+t*u*d+n*s*v-t*o*v,this.n44=n*u*f-r*o*f+r*s*l-t*u*l-n*s*c+t*o*c,this.multiplyScalar(1/e.determinant()),this},setRotationFromEuler:function(e,t){var n=e.x,r=e.y,i=e.z,s=Math.cos(n),n=Math.sin(n),o=Math.cos(r),r=Math.sin(r),u=Math.cos(i),i=Math.sin(i);switch(t){case"YXZ":var a=o*u,f=o*i,l=r*u,c=r*i;this.n11=a+c*n,this.n12=l*n-f,this.n13=s*r,this.n21=s*i,this.n22=s*u,this.n23=-n,this.n31=f*n-l,this.n32=c+a*n,this.n33=s*o;break;case"ZXY":a=o*u,f=o*i,l=r*u,c=r*i,this.n11=a-c*n,this.n12=-s*i,this.n13=l+f*n,this.n21=f+l*n,this.n22=s*u,this.n23=c-a*n,this.n31=-s*r,this.n32=n,this.n33=s*o;break;case"ZYX":a=s*u,f=s*i,l=n*u,c=n*i,this.n11=o*u,this.n12=l*r-f,this.n13=a*r+c,this.n21=o*i,this.n22=c*r+a,this.n23=f*r-l,this.n31=-r,this.n32=n*o,this.n33=s*o;break;case"YZX":a=s*o,f=s*r,l=n*o,c=n*r,this.n11=o*u,this.n12=c-a*i,this.n13=l*i+f,this.n21=i,this.n22=s*u,this.n23=-n*u,this.n31=-r*u,this.n32=f*i+l,this.n33=a-c*i;break;case"XZY":a=s*o,f=s*r,l=n*o,c=n*r,this.n11=o*u,this.n12=-i,this.n13=r*u,this.n21=a*i+c,this.n22=s*u,this.n23=f*i-l,this.n31=l*i-f,this.n32=n*u,this.n33=c*i+a;break;default:a=s*u,f=s*i,l=n*u,c=n*i,this.n11=o*u,this.n12=-o*i,this.n13=r,this.n21=f+l*r,this.n22=a-c*r,this.n23=-n*o,this.n31=c-a*r,this.n32=l+f*r,this.n33=s*o}return this},setRotationFromQuaternion:function(e){var t=e.x,n=e.y,r=e.z,i=e.w,s=t+t,o=n+n,u=r+r,e=t*s,a=t*o,t=t*u,f=n*o,n=n*u,r=r*u,s=i*s,o=i*o,i=i*u;return this.n11=1-(f+r),this.n12=a-i,this.n13=t+o,this.n21=a+i,this.n22=1-(e+r),this.n23=n-s,this.n31=t-o,this.n32=n+s,this.n33=1-(e+f),this},scale:function(e){var t=e.x,n=e.y,e=e.z;return this.n11*=t,this.n12*=n,this.n13*=e,this.n21*=t,this.n22*=n,this.n23*=e,this.n31*=t,this.n32*=n,this.n33*=e,this.n41*=t,this.n42*=n,this.n43*=e,this},compose:function(e,t,n){var r=THREE.Matrix4.__m1,i=THREE.Matrix4.__m2;return r.identity(),r.setRotationFromQuaternion(t),i.setScale(n.x,n.y,n.z),this.multiply(r,i),this.n14=e.x,this.n24=e.y,this.n34=e.z,this},decompose:function(e,t,n){var r=THREE.Matrix4.__v1,i=THREE.Matrix4.__v2,s=THREE.Matrix4.__v3;return r.set(this.n11,this.n21,this.n31),i.set(this.n12,this.n22,this.n32),s.set(this.n13,this.n23,this.n33),e=e instanceof THREE.Vector3?e:new THREE.Vector3,t=t instanceof THREE.Quaternion?t:new THREE.Quaternion,n=n instanceof THREE.Vector3?n:new THREE.Vector3,n.x=r.length(),n.y=i.length(),n.z=s.length(),e.x=this.n14,e.y=this.n24,e.z=this.n34,r=THREE.Matrix4.__m1,r.copy(this),r.n11/=n.x,r.n21/=n.x,r.n31/=n.x,r.n12/=n.y,r.n22/=n.y,r.n32/=n.y,r.n13/=n.z,r.n23/=n.z,r.n33/=n.z,t.setFromRotationMatrix(r),[e,t,n]},extractPosition:function(e){return this.n14=e.n14,this.n24=e.n24,this.n34=e.n34,this},extractRotation:function(e){var t=THREE.Matrix4.__v1,n=1/t.set(e.n11,e.n21,e.n31).length(),r=1/t.set(e.n12,e.n22,e.n32).length(),t=1/t.set(e.n13,e.n23,e.n33).length();return this.n11=e.n11*n,this.n21=e.n21*n,this.n31=e.n31*n,this.n12=e.n12*r,this.n22=e.n22*r,this.n32=e.n32*r,this.n13=e.n13*t,this.n23=e.n23*t,this.n33=e.n33*t,this},rotateByAxis:function(e,t){if(1===e.x&&0===e.y&&0===e.z)return this.rotateX(t);if(0===e.x&&1===e.y&&0===e.z)return this.rotateY(t);if(0===e.x&&0===e.y&&1===e.z)return this.rotateZ(t);var n=e.x,r=e.y,i=e.z,s=Math.sqrt(n*n+r*r+i*i),n=n/s,r=r/s,i=i/s,s=n*n,o=r*r,u=i*i,a=Math.cos(t),f=Math.sin(t),l=1-a,c=n*r*l,h=n*i*l,l=r*i*l,n=n*f,p=r*f,f=i*f,i=s+(1-s)*a,s=c+f,r=h-p,c=c-f,o=o+(1-o)*a,f=l+n,h=h+p,l=l-n,u=u+(1-u)*a,a=this.n11,n=this.n21,p=this.n31,d=this.n41,v=this.n12,m=this.n22,g=this.n32,y=this.n42,b=this.n13,w=this.n23,E=this.n33,S=this.n43;return this.n11=i*a+s*v+r*b,this.n21=i*n+s*m+r*w,this.n31=i*p+s*g+r*E,this.n41=i*d+s*y+r*S,this.n12=c*a+o*v+f*b,this.n22=c*n+o*m+f*w,this.n32=c*p+o*g+f*E,this.n42=c*d+o*y+f*S,this.n13=h*a+l*v+u*b,this.n23=h*n+l*m+u*w,this.n33=h*p+l*g+u*E,this.n43=h*d+l*y+u*S,this},rotateX:function(e){var t=this.n12,n=this.n22,r=this.n32,i=this.n42,s=this.n13,o=this.n23,u=this.n33,a=this.n43,f=Math.cos(e),e=Math.sin(e);return this.n12=f*t+e*s,this.n22=f*n+e*o,this.n32=f*r+e*u,this.n42=f*i+e*a,this.n13=f*s-e*t,this.n23=f*o-e*n,this.n33=f*u-e*r,this.n43=f*a-e*i,this},rotateY:function(e){var t=this.n11,n=this.n21,r=this.n31,i=this.n41,s=this.n13,o=this.n23,u=this.n33,a=this.n43,f=Math.cos(e),e=Math.sin(e);return this.n11=f*t-e*s,this.n21=f*n-e*o,this.n31=f*r-e*u,this.n41=f*i-e*a,this.n13=f*s+e*t,this.n23=f*o+e*n,this.n33=f*u+e*r,this.n43=f*a+e*i,this},rotateZ:function(e){var t=this.n11,n=this.n21,r=this.n31,i=this.n41,s=this.n12,o=this.n22,u=this.n32,a=this.n42,f=Math.cos(e),e=Math.sin(e);return this.n11=f*t+e*s,this.n21=f*n+e*o,this.n31=f*r+e*u,this.n41=f*i+e*a,this.n12=f*s-e*t,this.n22=f*o-e*n,this.n32=f*u-e*r,this.n42=f*a-e*i,this},translate:function(e){var t=e.x,n=e.y,e=e.z;return this.n14=this.n11*t+this.n12*n+this.n13*e+this.n14,this.n24=this.n21*t+this.n22*n+this.n23*e+this.n24,this.n34=this.n31*t+this.n32*n+this.n33*e+this.n34,this.n44=this.n41*t+this.n42*n+this.n43*e+this.n44,this}},THREE.Matrix4.makeInvert3x3=function(e){var t=e.m33,n=t.m,r=e.n33*e.n22-e.n32*e.n23,i=-e.n33*e.n21+e.n31*e.n23,s=e.n32*e.n21-e.n31*e.n22,o=-e.n33*e.n12+e.n32*e.n13,u=e.n33*e.n11-e.n31*e.n13,a=-e.n32*e.n11+e.n31*e.n12,f=e.n23*e.n12-e.n22*e.n13,l=-e.n23*e.n11+e.n21*e.n13,c=e.n22*e.n11-e.n21*e.n12,e=e.n11*r+e.n21*o+e.n31*f;return 0===e?null:(e=1/e,n[0]=e*r,n[1]=e*i,n[2]=e*s,n[3]=e*o,n[4]=e*u,n[5]=e*a,n[6]=e*f,n[7]=e*l,n[8]=e*c,t)},THREE.Matrix4.makeFrustum=function(e,t,n,r,i,s){var o;return o=new THREE.Matrix4,o.n11=2*i/(t-e),o.n12=0,o.n13=(t+e)/(t-e),o.n14=0,o.n21=0,o.n22=2*i/(r-n),o.n23=(r+n)/(r-n),o.n24=0,o.n31=0,o.n32=0,o.n33=-(s+i)/(s-i),o.n34=-2*s*i/(s-i),o.n41=0,o.n42=0,o.n43=-1,o.n44=0,o},THREE.Matrix4.makePerspective=function(e,t,n,r){var i,e=n*Math.tan(e*Math.PI/360);return i=-e,THREE.Matrix4.makeFrustum(i*t,e*t,i,e,n,r)},THREE.Matrix4.makeOrtho=function(e,t,n,r,i,s){var o,u,a,f;return o=new THREE.Matrix4,u=t-e,a=n-r,f=s-i,o.n11=2/u,o.n12=0,o.n13=0,o.n14=-((t+e)/u),o.n21=0,o.n22=2/a,o.n23=0,o.n24=-((n+r)/a),o.n31=0,o.n32=0,o.n33=-2/f,o.n34=-((s+i)/f),o.n41=0,o.n42=0,o.n43=0,o.n44=1,o},THREE.Matrix4.__v1=new THREE.Vector3,THREE.Matrix4.__v2=new THREE.Vector3,THREE.Matrix4.__v3=new THREE.Vector3,THREE.Matrix4.__m1=new THREE.Matrix4,THREE.Matrix4.__m2=new THREE.Matrix4,THREE.Object3D=function(){this.id=THREE.Object3DCount++,this.name="",this.parent=void 0,this.children=[],this.up=new THREE.Vector3(0,1,0),this.position=new THREE.Vector3,this.rotation=new THREE.Vector3,this.eulerOrder="XYZ",this.scale=new THREE.Vector3(1,1,1),this.flipSided=this.doubleSided=!1,this.renderDepth=null,this.rotationAutoUpdate=!0,this.matrix=new THREE.Matrix4,this.matrixWorld=new THREE.Matrix4,this.matrixRotationWorld=new THREE.Matrix4,this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0,this.quaternion=new THREE.Quaternion,this.useQuaternion=!1,this.boundRadius=0,this.boundRadiusScale=1,this.visible=!0,this.receiveShadow=this.castShadow=!1,this.frustumCulled=!0,this._vector=new THREE.Vector3},THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(e){this.matrix.multiply(e,this.matrix),this.scale.getScaleFromMatrix(this.matrix),this.rotation.getRotationFromMatrix(this.matrix,this.scale),this.position.getPositionFromMatrix(this.matrix)},translate:function(e,t){this.matrix.rotateAxis(t),this.position.addSelf(t.multiplyScalar(e))},translateX:function(e){this.translate(e,this._vector.set(1,0,0))},translateY:function(e){this.translate(e,this._vector.set(0,1,0))},translateZ:function(e){this.translate(e,this._vector.set(0,0,1))},lookAt:function(e){this.matrix.lookAt(e,this.position,this.up),this.rotationAutoUpdate&&this.rotation.getRotationFromMatrix(this.matrix)},add:function(e){if(e===this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(-1===this.children.indexOf(e)){void 0!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e);for(var t=this;void 0!==t.parent;)t=t.parent;void 0!==t&&t instanceof THREE.Scene&&t.__addObject(e)}},remove:function(e){var t=this.children.indexOf(e);if(-1!==t){e.parent=void 0,this.children.splice(t,1);for(t=this;void 0!==t.parent;)t=t.parent;void 0!==t&&t instanceof THREE.Scene&&t.__removeObject(e)}},getChildByName:function(e,t){var n,r,i;for(n=0,r=this.children.length;n<r;n++){i=this.children[n];if(i.name===e||t&&(i=i.getChildByName(e,t),void 0!==i))return i}},updateMatrix:function(){this.matrix.setPosition(this.position),this.useQuaternion?this.matrix.setRotationFromQuaternion(this.quaternion):this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder);if(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,Math.max(this.scale.y,this.scale.z));this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||e)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0;for(var t=0,n=this.children.length;t<n;t++)this.children[t].updateMatrixWorld(e)}},THREE.Object3DCount=0,THREE.Projector=function(){function e(){var e=o[s]=o[s]||new THREE.RenderableObject;return s++,e}function t(){var e=f[a]=f[a]||new THREE.RenderableVertex;return a++,e}function n(e,t){return t.z-e.z}function r(e,t){var n=0,r=1,i=e.z+e.w,s=t.z+t.w,o=-e.z+e.w,u=-t.z+t.w;return 0<=i&&0<=s&&0<=o&&0<=u?!0:0>i&&0>s||0>o&&0>u?!1:(0>i?n=Math.max(n,i/(i-s)):0>s&&(r=Math.min(r,i/(i-s))),0>o?n=Math.max(n,o/(o-u)):0>u&&(r=Math.min(r,o/(o-u))),r<n?!1:(e.lerpSelf(t,n),t.lerpSelf(e,1-r),!0))}var i,s,o=[],u,a,f=[],l,c,h=[],p,d=[],v,m,g=[],y,b,w=[],E={objects:[],sprites:[],lights:[],elements:[]},S=new THREE.Vector3,x=new THREE.Vector4,T=new THREE.Matrix4,N=new THREE.Matrix4,C=new THREE.Frustum,k=new THREE.Vector4,L=new THREE.Vector4;this.projectVector=function(e,t){return t.matrixWorldInverse.getInverse(t.matrixWorld),T.multiply(t.projectionMatrix,t.matrixWorldInverse),T.multiplyVector3(e),e},this.unprojectVector=function(e,t){return t.projectionMatrixInverse.getInverse(t.projectionMatrix),T.multiply(t.matrixWorld,t.projectionMatrixInverse),T.multiplyVector3(e),e},this.pickingRay=function(e,t){var n;return e.z=-1,n=new THREE.Vector3(e.x,e.y,1),this.unprojectVector(e,t),this.unprojectVector(n,t),n.subSelf(e).normalize(),new THREE.Ray(e,n)},this.projectGraph=function(t,r){s=0,E.objects.length=0,E.sprites.length=0,E.lights.length=0;var o=function(t){if(!1!==t.visible){(t instanceof THREE.Mesh||t instanceof THREE.Line)&&(!1===t.frustumCulled||C.contains(t))?(T.multiplyVector3(S.copy(t.position)),i=e(),i.object=t,i.z=S.z,E.objects.push(i)):t instanceof THREE.Sprite||t instanceof THREE.Particle?(T.multiplyVector3(S.copy(t.position)),i=e(),i.object=t,i.z=S.z,E.sprites.push(i)):t instanceof THREE.Light&&E.lights.push(t);for(var n=0,r=t.children.length;n<r;n++)o(t.children[n])}};return o(t),r&&E.objects.sort(n),E},this.projectScene=function(e,i,s){var o=i.near,S=i.far,O=!1,_,P,H,B,F,R,U,z,W,X,V,$,J,Q,G;b=m=p=c=0,E.elements.length=0,void 0===i.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),e.add(i)),e.updateMatrixWorld(),i.matrixWorldInverse.getInverse(i.matrixWorld),T.multiply(i.projectionMatrix,i.matrixWorldInverse),C.setFromMatrix(T),E=this.projectGraph(e,!1);for(e=0,_=E.objects.length;e<_;e++)if(W=E.objects[e].object,X=W.matrixWorld,a=0,W instanceof THREE.Mesh){V=W.geometry,$=W.geometry.materials,B=V.vertices,J=V.faces,Q=V.faceVertexUvs,V=W.matrixRotationWorld.extractRotation(X);for(P=0,H=B.length;P<H;P++)u=t(),u.positionWorld.copy(B[P].position),X.multiplyVector3(u.positionWorld),u.positionScreen.copy(u.positionWorld),T.multiplyVector4(u.positionScreen),u.positionScreen.x/=u.positionScreen.w,u.positionScreen.y/=u.positionScreen.w,u.visible=u.positionScreen.z>o&&u.positionScreen.z<S;for(B=0,P=J.length;B<P;B++){H=J[B];if(H instanceof THREE.Face3){if(F=f[H.a],R=f[H.b],U=f[H.c],!(F.visible&&R.visible&&U.visible))continue;if(O=0>(U.positionScreen.x-F.positionScreen.x)*(R.positionScreen.y-F.positionScreen.y)-(U.positionScreen.y-F.positionScreen.y)*(R.positionScreen.x-F.positionScreen.x),!W.doubleSided&&O==W.flipSided)continue;z=h[c]=h[c]||new THREE.RenderableFace3,c++,l=z,l.v1.copy(F),l.v2.copy(R),l.v3.copy(U)}else if(H instanceof THREE.Face4){if(F=f[H.a],R=f[H.b],U=f[H.c],z=f[H.d],!(F.visible&&R.visible&&U.visible&&z.visible))continue;if(O=0>(z.positionScreen.x-F.positionScreen.x)*(R.positionScreen.y-F.positionScreen.y)-(z.positionScreen.y-F.positionScreen.y)*(R.positionScreen.x-F.positionScreen.x)||0>(R.positionScreen.x-U.positionScreen.x)*(z.positionScreen.y-U.positionScreen.y)-(R.positionScreen.y-U.positionScreen.y)*(z.positionScreen.x-U.positionScreen.x),!W.doubleSided&&O==W.flipSided)continue;G=d[p]=d[p]||new THREE.RenderableFace4,p++,l=G,l.v1.copy(F),l.v2.copy(R),l.v3.copy(U),l.v4.copy(z)}l.normalWorld.copy(H.normal),!O&&(W.flipSided||W.doubleSided)&&l.normalWorld.negate(),V.multiplyVector3(l.normalWorld),l.centroidWorld.copy(H.centroid),X.multiplyVector3(l.centroidWorld),l.centroidScreen.copy(l.centroidWorld),T.multiplyVector3(l.centroidScreen),U=H.vertexNormals;for(F=0,R=U.length;F<R;F++)z=l.vertexNormalsWorld[F],z.copy(U[F]),!O&&(W.flipSided||W.doubleSided)&&z.negate(),V.multiplyVector3(z);for(F=0,R=Q.length;F<R;F++)if(G=Q[F][B])for(U=0,z=G.length;U<z;U++)l.uvs[F][U]=G[U];l.material=W.material,l.faceMaterial=null!==H.materialIndex?$[H.materialIndex]:null,l.z=l.centroidScreen.z,E.elements.push(l)}}else if(W instanceof THREE.Line){N.multiply(T,X),B=W.geometry.vertices,F=t(),F.positionScreen.copy(B[0].position),N.multiplyVector4(F.positionScreen);for(P=1,H=B.length;P<H;P++)if(F=t(),F.positionScreen.copy(B[P].position),N.multiplyVector4(F.positionScreen),R=f[a-2],k.copy(F.positionScreen),L.copy(R.positionScreen),r(k,L))k.multiplyScalar(1/k.w),L.multiplyScalar(1/L.w),X=g[m]=g[m]||new THREE.RenderableLine,m++,v=X,v.v1.positionScreen.copy(k),v.v2.positionScreen.copy(L),v.z=Math.max(k.z,L.z),v.material=W.material,E.elements.push(v)}for(e=0,_=E.sprites.length;e<_;e++)if(W=E.sprites[e].object,X=W.matrixWorld,W instanceof THREE.Particle&&(x.set(X.n14,X.n24,X.n34,1),T.multiplyVector4(x),x.z/=x.w,0<x.z&&1>x.z))o=w[b]=w[b]||new THREE.RenderableParticle,b++,y=o,y.x=x.x/x.w,y.y=x.y/x.w,y.z=x.z,y.rotation=W.rotation.z,y.scale.x=W.scale.x*Math.abs(y.x-(x.x+i.projectionMatrix.n11)/(x.w+i.projectionMatrix.n14)),y.scale.y=W.scale.y*Math.abs(y.y-(x.y+i.projectionMatrix.n22)/(x.w+i.projectionMatrix.n24)),y.material=W.material,E.elements.push(y);return s&&E.elements.sort(n),E}},THREE.Quaternion=function(e,t,n,r){this.x=e||0,this.y=t||0,this.z=n||0,this.w=void 0!==r?r:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,set:function(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this},clone:function(){return new THREE.Quaternion(this.x,this.y,this.z,this.w)},setFromEuler:function(e){var t=Math.PI/360,n=e.x*t,r=e.y*t,i=e.z*t,e=Math.cos(r),r=Math.sin(r),t=Math.cos(-i),i=Math.sin(-i),s=Math.cos(n),n=Math.sin(n),o=e*t,u=r*i;return this.w=o*s-u*n,this.x=o*n+u*s,this.y=r*t*s+e*i*n,this.z=e*i*s-r*t*n,this},setFromAxisAngle:function(e,t){var n=t/2,r=Math.sin(n);return this.x=e.x*r,this.y=e.y*r,this.z=e.z*r,this.w=Math.cos(n),this},setFromRotationMatrix:function(e){var t=Math.pow(e.determinant(),1/3);return this.w=Math.sqrt(Math.max(0,t+e.n11+e.n22+e.n33))/2,this.x=Math.sqrt(Math.max(0,t+e.n11-e.n22-e.n33))/2,this.y=Math.sqrt(Math.max(0,t-e.n11+e.n22-e.n33))/2,this.z=Math.sqrt(Math.max(0,t-e.n11-e.n22+e.n33))/2,this.x=0>e.n32-e.n23?-Math.abs(this.x):Math.abs(this.x),this.y=0>e.n13-e.n31?-Math.abs(this.y):Math.abs(this.y),this.z=0>e.n21-e.n12?-Math.abs(this.z):Math.abs(this.z),this.normalize(),this},calculateW:function(){return this.w=-Math.sqrt(Math.abs(1-this.x*this.x-this.y*this.y-this.z*this.z)),this},inverse:function(){return this.x*=-1,this.y*=-1,this.z*=-1,this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var e=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===e?this.w=this.z=this.y=this.x=0:(e=1/e,this.x*=e,this.y*=e,this.z*=e,this.w*=e),this},multiplySelf:function(e){var t=this.x,n=this.y,r=this.z,i=this.w,s=e.x,o=e.y,u=e.z,e=e.w;return this.x=t*e+i*s+n*u-r*o,this.y=n*e+i*o+r*s-t*u,this.z=r*e+i*u+t*o-n*s,this.w=i*e-t*s-n*o-r*u,this},multiply:function(e,t){return this.x=e.x*t.w+e.y*t.z-e.z*t.y+e.w*t.x,this.y=-e.x*t.z+e.y*t.w+e.z*t.x+e.w*t.y,this.z=e.x*t.y-e.y*t.x+e.z*t.w+e.w*t.z,this.w=-e.x*t.x-e.y*t.y-e.z*t.z+e.w*t.w,this},multiplyVector3:function(e,t){t||(t=e);var n=e.x,r=e.y,i=e.z,s=this.x,o=this.y,u=this.z,a=this.w,f=a*n+o*i-u*r,l=a*r+u*n-s*i,c=a*i+s*r-o*n,n=-s*n-o*r-u*i;return t.x=f*a+n*-s+l*-u-c*-o,t.y=l*a+n*-o+c*-s-f*-u,t.z=c*a+n*-u+f*-o-l*-s,t}},THREE.Quaternion.slerp=function(e,t,n,r){var i=e.w*t.w+e.x*t.x+e.y*t.y+e.z*t.z;0>i?(n.w=-t.w,n.x=-t.x,n.y=-t.y,n.z=-t.z,i=-i):n.copy(t);if(1<=Math.abs(i))return n.w=e.w,n.x=e.x,n.y=e.y,n.z=e.z,n;var s=Math.acos(i),i=Math.sqrt(1-i*i);return.001>Math.abs(i)?(n.w=.5*(e.w+t.w),n.x=.5*(e.x+t.x),n.y=.5*(e.y+t.y),n.z=.5*(e.z+t.z),n):(t=Math.sin((1-r)*s)/i,r=Math.sin(r*s)/i,n.w=e.w*t+n.w*r,n.x=e.x*t+n.x*r,n.y=e.y*t+n.y*r,n.z=e.z*t+n.z*r,n)},THREE.Vertex=function(e){this.position=e||new THREE.Vector3},THREE.Vertex.prototype={constructor:THREE.Vertex,clone:function(){return new THREE.Vertex(this.position.clone())}},THREE.Face3=function(e,t,n,r,i,s){this.a=e,this.b=t,this.c=n,this.normal=r instanceof THREE.Vector3?r:new THREE.Vector3,this.vertexNormals=r instanceof Array?r:[],this.color=i instanceof THREE.Color?i:new THREE.Color,this.vertexColors=i instanceof Array?i:[],this.vertexTangents=[],this.materialIndex=s,this.centroid=new THREE.Vector3},THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var e=new THREE.Face3(this.a,this.b,this.c);e.normal.copy(this.normal),e.color.copy(this.color),e.centroid.copy(this.centroid),e.materialIndex=this.materialIndex;var t,n;for(t=0,n=this.vertexNormals.length;t<n;t++)e.vertexNormals[t]=this.vertexNormals[t].clone();for(t=0,n=this.vertexColors.length;t<n;t++)e.vertexColors[t]=this.vertexColors[t].clone();for(t=0,n=this.vertexTangents.length;t<n;t++)e.vertexTangents[t]=this.vertexTangents[t].clone();return e}},THREE.Face4=function(e,t,n,r,i,s,o){this.a=e,this.b=t,this.c=n,this.d=r,this.normal=i instanceof THREE.Vector3?i:new THREE.Vector3,this.vertexNormals=i instanceof Array?i:[],this.color=s instanceof THREE.Color?s:new THREE.Color,this.vertexColors=s instanceof Array?s:[],this.vertexTangents=[],this.materialIndex=o,this.centroid=new THREE.Vector3},THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var e=new THREE.Face4(this.a,this.b,this.c,this.d);e.normal.copy(this.normal),e.color.copy(this.color),e.centroid.copy(this.centroid),e.materialIndex=this.materialIndex;var t,n;for(t=0,n=this.vertexNormals.length;t<n;t++)e.vertexNormals[t]=this.vertexNormals[t].clone();for(t=0,n=this.vertexColors.length;t<n;t++)e.vertexColors[t]=this.vertexColors[t].clone();for(t=0,n=this.vertexTangents.length;t<n;t++)e.vertexTangents[t]=this.vertexTangents[t].clone();return e}},THREE.UV=function(e,t){this.u=e||0,this.v=t||0},THREE.UV.prototype={constructor:THREE.UV,set:function(e,t){return this.u=e,this.v=t,this},copy:function(e){return this.u=e.u,this.v=e.v,this},lerpSelf:function(e,t){return this.u+=(e.u-this.u)*t,this.v+=(e.v-this.v)*t,this},clone:function(){return new THREE.UV(this.u,this.v)}},THREE.Geometry=function(){this.id=THREE.GeometryCount++,this.vertices=[],this.colors=[],this.materials=[],this.faces=[],this.faceUvs=[[]],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphColors=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.boundingSphere=this.boundingBox=null,this.dynamic=this.hasTangents=!1},THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(e){var t=new THREE.Matrix4;t.extractRotation(e);for(var n=0,r=this.vertices.length;n<r;n++)e.multiplyVector3(this.vertices[n].position);n=0;for(r=this.faces.length;n<r;n++){var i=this.faces[n];t.multiplyVector3(i.normal);for(var s=0,o=i.vertexNormals.length;s<o;s++)t.multiplyVector3(i.vertexNormals[s]);e.multiplyVector3(i.centroid)}},computeCentroids:function(){var e,t,n;for(e=0,t=this.faces.length;e<t;e++)n=this.faces[e],n.centroid.set(0,0,0),n instanceof THREE.Face3?(n.centroid.addSelf(this.vertices[n.a].position),n.centroid.addSelf(this.vertices[n.b].position),n.centroid.addSelf(this.vertices[n.c].position),n.centroid.divideScalar(3)):n instanceof THREE.Face4&&(n.centroid.addSelf(this.vertices[n.a].position),n.centroid.addSelf(this.vertices[n.b].position),n.centroid.addSelf(this.vertices[n.c].position),n.centroid.addSelf(this.vertices[n.d].position),n.centroid.divideScalar(4))},computeFaceNormals:function(){var e,t,n,r,i,s,o=new THREE.Vector3,u=new THREE.Vector3;for(e=0,t=this.faces.length;e<t;e++)n=this.faces[e],r=this.vertices[n.a],i=this.vertices[n.b],s=this.vertices[n.c],o.sub(s.position,i.position),u.sub(r.position,i.position),o.crossSelf(u),o.isZero()||o.normalize(),n.normal.copy(o)},computeVertexNormals:function(){var e,t,n,r;if(void 0===this.__tmpVertices){r=this.__tmpVertices=Array(this.vertices.length);for(e=0,t=this.vertices.length;e<t;e++)r[e]=new THREE.Vector3;for(e=0,t=this.faces.length;e<t;e++)(n=this.faces[e],n instanceof THREE.Face3)?n.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:n instanceof THREE.Face4&&(n.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{r=this.__tmpVertices;for(e=0,t=this.vertices.length;e<t;e++)r[e].set(0,0,0)}for(e=0,t=this.faces.length;e<t;e++)n=this.faces[e],n instanceof THREE.Face3?(r[n.a].addSelf(n.normal),r[n.b].addSelf(n.normal),r[n.c].addSelf(n.normal)):n instanceof THREE.Face4&&(r[n.a].addSelf(n.normal),r[n.b].addSelf(n.normal),r[n.c].addSelf(n.normal),r[n.d].addSelf(n.normal));for(e=0,t=this.vertices.length;e<t;e++)r[e].normalize();for(e=0,t=this.faces.length;e<t;e++)n=this.faces[e],n instanceof THREE.Face3?(n.vertexNormals[0].copy(r[n.a]),n.vertexNormals[1].copy(r[n.b]),n.vertexNormals[2].copy(r[n.c])):n instanceof THREE.Face4&&(n.vertexNormals[0].copy(r[n.a]),n.vertexNormals[1].copy(r[n.b]),n.vertexNormals[2].copy(r[n.c]),n.vertexNormals[3].copy(r[n.d]))},computeMorphNormals:function(){var e,t,n,r,i;for(n=0,r=this.faces.length;n<r;n++){i=this.faces[n],i.__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]);for(e=0,t=i.vertexNormals.length;e<t;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone()}var s=new THREE.Geometry;s.faces=this.faces;for(e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o=this.morphNormals[e].faceNormals,u=this.morphNormals[e].vertexNormals,a,f;for(n=0,r=this.faces.length;n<r;n++)i=this.faces[n],a=new THREE.Vector3,f=i instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},o.push(a),u.push(f)}o=this.morphNormals[e],s.vertices=this.morphTargets[e].vertices,s.computeFaceNormals(),s.computeVertexNormals();for(n=0,r=this.faces.length;n<r;n++)i=this.faces[n],a=o.faceNormals[n],f=o.vertexNormals[n],a.copy(i.normal),i instanceof THREE.Face3?(f.a.copy(i.vertexNormals[0]),f.b.copy(i.vertexNormals[1]),f.c.copy(i.vertexNormals[2])):(f.a.copy(i.vertexNormals[0]),f.b.copy(i.vertexNormals[1]),f.c.copy(i.vertexNormals[2]),f.d.copy(i.vertexNormals[3]))}for(n=0,r=this.faces.length;n<r;n++)i=this.faces[n],i.normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeTangents:function(){function e(e,t,n,r,i,s,T){u=e.vertices[t].position,a=e.vertices[n].position,f=e.vertices[r].position,l=o[i],c=o[s],h=o[T],p=a.x-u.x,d=f.x-u.x,v=a.y-u.y,m=f.y-u.y,g=a.z-u.z,y=f.z-u.z,b=c.u-l.u,w=h.u-l.u,E=c.v-l.v,S=h.v-l.v,x=1/(b*S-w*E),k.set((S*p-E*d)*x,(S*v-E*m)*x,(S*g-E*y)*x),L.set((b*d-w*p)*x,(b*m-w*v)*x,(b*y-w*g)*x),N[t].addSelf(k),N[n].addSelf(k),N[r].addSelf(k),C[t].addSelf(L),C[n].addSelf(L),C[r].addSelf(L)}var t,n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,y,b,w,E,S,x,T,N=[],C=[],k=new THREE.Vector3,L=new THREE.Vector3,A=new THREE.Vector3,O=new THREE.Vector3,M=new THREE.Vector3;for(t=0,n=this.vertices.length;t<n;t++)N[t]=new THREE.Vector3,C[t]=new THREE.Vector3;for(t=0,n=this.faces.length;t<n;t++)s=this.faces[t],o=this.faceVertexUvs[0][t],s instanceof THREE.Face3?e(this,s.a,s.b,s.c,0,1,2):s instanceof THREE.Face4&&(e(this,s.a,s.b,s.c,0,1,2),e(this,s.a,s.b,s.d,0,1,3));var _=["a","b","c","d"];for(t=0,n=this.faces.length;t<n;t++){s=this.faces[t];for(r=0;r<s.vertexNormals.length;r++)M.copy(s.vertexNormals[r]),i=s[_[r]],T=N[i],A.copy(T),A.subSelf(M.multiplyScalar(M.dot(T))).normalize(),O.cross(s.vertexNormals[r],T),i=O.dot(C[i]),i=0>i?-1:1,s.vertexTangents[r]=new THREE.Vector4(A.x,A.y,A.z,i)}this.hasTangents=!0},computeBoundingBox:function(){this.boundingBox||(this.boundingBox={min:new THREE.Vector3,max:new THREE.Vector3});if(0<this.vertices.length){var e;e=this.vertices[0].position,this.boundingBox.min.copy(e),this.boundingBox.max.copy(e);for(var t=this.boundingBox.min,n=this.boundingBox.max,r=1,i=this.vertices.length;r<i;r++)e=this.vertices[r].position,e.x<t.x?t.x=e.x:e.x>n.x&&(n.x=e.x),e.y<t.y?t.y=e.y:e.y>n.y&&(n.y=e.y),e.z<t.z?t.z=e.z:e.z>n.z&&(n.z=e.z)}else this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){this.boundingSphere||(this.boundingSphere={radius:0});for(var e,t=0,n=0,r=this.vertices.length;n<r;n++)e=this.vertices[n].position.length(),e>t&&(t=e);this.boundingSphere.radius=t},mergeVertices:function(){var e={},t=[],n=[],r,i=Math.pow(10,4),s,o;for(s=0,o=this.vertices.length;s<o;s++)r=this.vertices[s].position,r=[Math.round(r.x*i),Math.round(r.y*i),Math.round(r.z*i)].join("_"),void 0===e[r]?(e[r]=s,t.push(this.vertices[s]),n[s]=t.length-1):n[s]=n[e[r]];for(s=0,o=this.faces.length;s<o;s++)(e=this.faces[s],e instanceof THREE.Face3)?(e.a=n[e.a],e.b=n[e.b],e.c=n[e.c]):e instanceof THREE.Face4&&(e.a=n[e.a],e.b=n[e.b],e.c=n[e.c],e.d=n[e.d]);this.vertices=t}},THREE.GeometryCount=0,THREE.Spline=function(e){function t(e,t,n,r,i,s,o){return e=.5*(n-e),r=.5*(r-t),(2*(t-n)+e+r)*o+(-3*(t-n)-2*e-r)*s+e*i+t}this.points=e;var n=[],r={x:0,y:0,z:0},i,s,o,u,a,f,l,c,h;this.initFromArray=function(e){this.points=[];for(var t=0;t<e.length;t++)this.points[t]={x:e[t][0],y:e[t][1],z:e[t][2]}},this.getPoint=function(e){return i=(this.points.length-1)*e,s=Math.floor(i),o=i-s,n[0]=0===s?s:s-1,n[1]=s,n[2]=s>this.points.length-2?s:s+1,n[3]=s>this.points.length-3?s:s+2,f=this.points[n[0]],l=this.points[n[1]],c=this.points[n[2]],h=this.points[n[3]],u=o*o,a=o*u,r.x=t(f.x,l.x,c.x,h.x,o,u,a),r.y=t(f.y,l.y,c.y,h.y,o,u,a),r.z=t(f.z,l.z,c.z,h.z,o,u,a),r},this.getControlPointsArray=function(){var e,t,n=this.points.length,r=[];for(e=0;e<n;e++)t=this.points[e],r[e]=[t.x,t.y,t.z];return r},this.getLength=function(e){var t,n,r,i=t=t=0,s=new THREE.Vector3,o=new THREE.Vector3,u=[],a=0;u[0]=0,e||(e=100),n=this.points.length*e,s.copy(this.points[0]);for(e=1;e<n;e++)t=e/n,r=this.getPoint(t),o.copy(r),a+=o.distanceTo(s),s.copy(r),t*=this.points.length-1,t=Math.floor(t),t!=i&&(u[t]=a,i=t);return u[u.length]=a,{chunks:u,total:a}},this.reparametrizeByArcLength=function(e){var t,n,r,i,s,o,u=[],a=new THREE.Vector3,f=this.getLength();u.push(a.copy(this.points[0]).clone());for(t=1;t<this.points.length;t++){n=f.chunks[t]-f.chunks[t-1],o=Math.ceil(e*n/f.total),i=(t-1)/(this.points.length-1),s=t/(this.points.length-1);for(n=1;n<o-1;n++)r=i+n*(1/o)*(s-i),r=this.getPoint(r),u.push(a.copy(r).clone());u.push(a.copy(this.points[t]).clone())}this.points=u}},THREE.Camera=function(){THREE.Object3D.call(this),this.matrixWorldInverse=new THREE.Matrix4,this.projectionMatrix=new THREE.Matrix4,this.projectionMatrixInverse=new THREE.Matrix4},THREE.Camera.prototype=new THREE.Object3D,THREE.Camera.prototype.constructor=THREE.Camera,THREE.Camera.prototype.lookAt=function(e){this.matrix.lookAt(this.position,e,this.up),this.rotationAutoUpdate&&this.rotation.getRotationFromMatrix(this.matrix)},THREE.OrthographicCamera=function(e,t,n,r,i,s){THREE.Camera.call(this),this.left=e,this.right=t,this.top=n,this.bottom=r,this.near=void 0!==i?i:.1,this.far=void 0!==s?s:2e3,this.updateProjectionMatrix()},THREE.OrthographicCamera.prototype=new THREE.Camera,THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera,THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix=THREE.Matrix4.makeOrtho(this.left,this.right,this.top,this.bottom,this.near,this.far)},THREE.PerspectiveCamera=function(e,t,n,r){THREE.Camera.call(this),this.fov=void 0!==e?e:50,this.aspect=void 0!==t?t:1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype=new THREE.Camera,THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera,THREE.PerspectiveCamera.prototype.setLens=function(e,t){this.fov=2*Math.atan((void 0!==t?t:24)/(2*e))*(180/Math.PI),this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.setViewOffset=function(e,t,n,r,i,s){this.fullWidth=e,this.fullHeight=t,this.x=n,this.y=r,this.width=i,this.height=s,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var e=this.fullWidth/this.fullHeight,t=Math.tan(this.fov*Math.PI/360)*this.near,n=-t,r=e*n,e=Math.abs(e*t-r),n=Math.abs(t-n);this.projectionMatrix=THREE.Matrix4.makeFrustum(r+this.x*e/this.fullWidth,r+(this.x+this.width)*e/this.fullWidth,t-(this.y+this.height)*n/this.fullHeight,t-this.y*n/this.fullHeight,this.near,this.far)}else this.projectionMatrix=THREE.Matrix4.makePerspective(this.fov,this.aspect,this.near,this.far)},THREE.Light=function(e){THREE.Object3D.call(this),this.color=new THREE.Color(e)},THREE.Light.prototype=new THREE.Object3D,THREE.Light.prototype.constructor=THREE.Light,THREE.Light.prototype.supr=THREE.Object3D.prototype,THREE.AmbientLight=function(e){THREE.Light.call(this,e)},THREE.AmbientLight.prototype=new THREE.Light,THREE.AmbientLight.prototype.constructor=THREE.AmbientLight,THREE.DirectionalLight=function(e,t,n){THREE.Light.call(this,e),this.position=new THREE.Vector3(0,1,0),this.target=new THREE.Object3D,this.intensity=void 0!==t?t:1,this.distance=void 0!==n?n:0,this.onlyShadow=this.castShadow=!1,this.shadowCameraNear=50,this.shadowCameraFar=5e3,this.shadowCameraLeft=-500,this.shadowCameraTop=this.shadowCameraRight=500,this.shadowCameraBottom=-500,this.shadowCameraVisible=!1,this.shadowBias=0,this.shadowDarkness=.5,this.shadowMapHeight=this.shadowMapWidth=512,this.shadowCascade=!1,this.shadowCascadeOffset=new THREE.Vector3(0,0,-1e3),this.shadowCascadeCount=2,this.shadowCascadeBias=[0,0,0],this.shadowCascadeWidth=[512,512,512],this.shadowCascadeHeight=[512,512,512],this.shadowCascadeNearZ=[-1,.99,.998],this.shadowCascadeFarZ=[.99,.998,1],this.shadowCascadeArray=[],this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null},THREE.DirectionalLight.prototype=new THREE.Light,THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight,THREE.PointLight=function(e,t,n){THREE.Light.call(this,e),this.position=new THREE.Vector3(0,0,0),this.intensity=void 0!==t?t:1,this.distance=void 0!==n?n:0},THREE.PointLight.prototype=new THREE.Light,THREE.PointLight.prototype.constructor=THREE.PointLight,THREE.SpotLight=function(e,t,n,r){THREE.Light.call(this,e),this.position=new THREE.Vector3(0,1,0),this.target=new THREE.Object3D,this.intensity=void 0!==t?t:1,this.distance=void 0!==n?n:0,this.castShadow=void 0!==r?r:!1,this.onlyShadow=!1,this.shadowCameraNear=50,this.shadowCameraFar=5e3,this.shadowCameraFov=50,this.shadowCameraVisible=!1,this.shadowBias=0,this.shadowDarkness=.5,this.shadowMapHeight=this.shadowMapWidth=512,this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null},THREE.SpotLight.prototype=new THREE.Light,THREE.SpotLight.prototype.constructor=THREE.SpotLight,THREE.Material=function(e){e=e||{},this.id=THREE.MaterialCount++,this.name="",this.opacity=void 0!==e.opacity?e.opacity:1,this.transparent=void 0!==e.transparent?e.transparent:!1,this.blending=void 0!==e.blending?e.blending:THREE.NormalBlending,this.depthTest=void 0!==e.depthTest?e.depthTest:!0,this.depthWrite=void 0!==e.depthWrite?e.depthWrite:!0,this.polygonOffset=void 0!==e.polygonOffset?e.polygonOffset:!1,this.polygonOffsetFactor=void 0!==e.polygonOffsetFactor?e.polygonOffsetFactor:0,this.polygonOffsetUnits=void 0!==e.polygonOffsetUnits?e.polygonOffsetUnits:0,this.alphaTest=void 0!==e.alphaTest?e.alphaTest:0,this.overdraw=void 0!==e.overdraw?e.overdraw:!1},THREE.MaterialCount=0,THREE.NoShading=0,THREE.FlatShading=1,THREE.SmoothShading=2,THREE.NoColors=0,THREE.FaceColors=1,THREE.VertexColors=2,THREE.NoBlending=0,THREE.NormalBlending=1,THREE.AdditiveBlending=2,THREE.SubtractiveBlending=3,THREE.MultiplyBlending=4,THREE.AdditiveAlphaBlending=5,THREE.LineBasicMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.linewidth=void 0!==e.linewidth?e.linewidth:1,this.linecap=void 0!==e.linecap?e.linecap:"round",this.linejoin=void 0!==e.linejoin?e.linejoin:"round",this.vertexColors=e.vertexColors?e.vertexColors:!1,this.fog=void 0!==e.fog?e.fog:!0},THREE.LineBasicMaterial.prototype=new THREE.Material,THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial,THREE.MeshBasicMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.map=void 0!==e.map?e.map:null,this.lightMap=void 0!==e.lightMap?e.lightMap:null,this.envMap=void 0!==e.envMap?e.envMap:null,this.combine=void 0!==e.combine?e.combine:THREE.MultiplyOperation,this.reflectivity=void 0!==e.reflectivity?e.reflectivity:1,this.refractionRatio=void 0!==e.refractionRatio?e.refractionRatio:.98,this.fog=void 0!==e.fog?e.fog:!0,this.shading=void 0!==e.shading?e.shading:THREE.SmoothShading,this.wireframe=void 0!==e.wireframe?e.wireframe:!1,this.wireframeLinewidth=void 0!==e.wireframeLinewidth?e.wireframeLinewidth:1,this.wireframeLinecap=void 0!==e.wireframeLinecap?e.wireframeLinecap:"round",this.wireframeLinejoin=void 0!==e.wireframeLinejoin?e.wireframeLinejoin:"round",this.vertexColors=void 0!==e.vertexColors?e.vertexColors:!1,this.skinning=void 0!==e.skinning?e.skinning:!1,this.morphTargets=void 0!==e.morphTargets?e.morphTargets:!1},THREE.MeshBasicMaterial.prototype=new THREE.Material,THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial,THREE.MeshLambertMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.ambient=void 0!==e.ambient?new THREE.Color(e.ambient):new THREE.Color(16777215),this.wrapAround=void 0!==e.wrapAround?e.wrapAround:!1,this.wrapRGB=new THREE.Vector3(1,1,1),this.map=void 0!==e.map?e.map:null,this.lightMap=void 0!==e.lightMap?e.lightMap:null,this.envMap=void 0!==e.envMap?e.envMap:null,this.combine=void 0!==e.combine?e.combine:THREE.MultiplyOperation,this.reflectivity=void 0!==e.reflectivity?e.reflectivity:1,this.refractionRatio=void 0!==e.refractionRatio?e.refractionRatio:.98,this.fog=void 0!==e.fog?e.fog:!0,this.shading=void 0!==e.shading?e.shading:THREE.SmoothShading,this.wireframe=void 0!==e.wireframe?e.wireframe:!1,this.wireframeLinewidth=void 0!==e.wireframeLinewidth?e.wireframeLinewidth:1,this.wireframeLinecap=void 0!==e.wireframeLinecap?e.wireframeLinecap:"round",this.wireframeLinejoin=void 0!==e.wireframeLinejoin?e.wireframeLinejoin:"round",this.vertexColors=void 0!==e.vertexColors?e.vertexColors:!1,this.skinning=void 0!==e.skinning?e.skinning:!1,this.morphTargets=void 0!==e.morphTargets?e.morphTargets:!1,this.morphNormals=void 0!==e.morphNormals?e.morphNormals:!1},THREE.MeshLambertMaterial.prototype=new THREE.Material,THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial,THREE.MeshPhongMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.ambient=void 0!==e.ambient?new THREE.Color(e.ambient):new THREE.Color(16777215),this.specular=void 0!==e.specular?new THREE.Color(e.specular):new THREE.Color(1118481),this.shininess=void 0!==e.shininess?e.shininess:30,this.metal=void 0!==e.metal?e.metal:!1,this.perPixel=void 0!==e.perPixel?e.perPixel:!1,this.wrapAround=void 0!==e.wrapAround?e.wrapAround:!1,this.wrapRGB=new THREE.Vector3(1,1,1),this.map=void 0!==e.map?e.map:null,this.lightMap=void 0!==e.lightMap?e.lightMap:null,this.envMap=void 0!==e.envMap?e.envMap:null,this.combine=void 0!==e.combine?e.combine:THREE.MultiplyOperation,this.reflectivity=void 0!==e.reflectivity?e.reflectivity:1,this.refractionRatio=void 0!==e.refractionRatio?e.refractionRatio:.98,this.fog=void 0!==e.fog?e.fog:!0,this.shading=void 0!==e.shading?e.shading:THREE.SmoothShading,this.wireframe=void 0!==e.wireframe?e.wireframe:!1,this.wireframeLinewidth=void 0!==e.wireframeLinewidth?e.wireframeLinewidth:1,this.wireframeLinecap=void 0!==e.wireframeLinecap?e.wireframeLinecap:"round",this.wireframeLinejoin=void 0!==e.wireframeLinejoin?e.wireframeLinejoin:"round",this.vertexColors=void 0!==e.vertexColors?e.vertexColors:!1,this.skinning=void 0!==e.skinning?e.skinning:!1,this.morphTargets=void 0!==e.morphTargets?e.morphTargets:!1,this.morphNormals=void 0!==e.morphNormals?e.morphNormals:!1},THREE.MeshPhongMaterial.prototype=new THREE.Material,THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial,THREE.MeshDepthMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.shading=void 0!==e.shading?e.shading:THREE.SmoothShading,this.wireframe=void 0!==e.wireframe?e.wireframe:!1,this.wireframeLinewidth=void 0!==e.wireframeLinewidth?e.wireframeLinewidth:1},THREE.MeshDepthMaterial.prototype=new THREE.Material,THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial,THREE.MeshNormalMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.shading=e.shading?e.shading:THREE.FlatShading,this.wireframe=e.wireframe?e.wireframe:!1,this.wireframeLinewidth=e.wireframeLinewidth?e.wireframeLinewidth:1},THREE.MeshNormalMaterial.prototype=new THREE.Material,THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial,THREE.MeshFaceMaterial=function(){},THREE.ParticleBasicMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.map=void 0!==e.map?e.map:null,this.size=void 0!==e.size?e.size:1,this.sizeAttenuation=void 0!==e.sizeAttenuation?e.sizeAttenuation:!0,this.vertexColors=void 0!==e.vertexColors?e.vertexColors:!1,this.fog=void 0!==e.fog?e.fog:!0},THREE.ParticleBasicMaterial.prototype=new THREE.Material,THREE.ParticleBasicMaterial.prototype.constructor=THREE.ParticleBasicMaterial,THREE.ShaderMaterial=function(e){THREE.Material.call(this,e),e=e||{},this.fragmentShader=void 0!==e.fragmentShader?e.fragmentShader:"void main() {}",this.vertexShader=void 0!==e.vertexShader?e.vertexShader:"void main() {}",this.uniforms=void 0!==e.uniforms?e.uniforms:{},this.attributes=e.attributes,this.shading=void 0!==e.shading?e.shading:THREE.SmoothShading,this.wireframe=void 0!==e.wireframe?e.wireframe:!1,this.wireframeLinewidth=void 0!==e.wireframeLinewidth?e.wireframeLinewidth:1,this.fog=void 0!==e.fog?e.fog:!1,this.lights=void 0!==e.lights?e.lights:!1,this.vertexColors=void 0!==e.vertexColors?e.vertexColors:!1,this.skinning=void 0!==e.skinning?e.skinning:!1,this.morphTargets=void 0!==e.morphTargets?e.morphTargets:!1},THREE.ShaderMaterial.prototype=new THREE.Material,THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial,THREE.Texture=function(e,t,n,r,i,s,o,u){this.id=THREE.TextureCount++,this.image=e,this.mapping=void 0!==t?t:new THREE.UVMapping,this.wrapS=void 0!==n?n:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==r?r:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==i?i:THREE.LinearFilter,this.minFilter=void 0!==s?s:THREE.LinearMipMapLinearFilter,this.format=void 0!==o?o:THREE.RGBAFormat,this.type=void 0!==u?u:THREE.UnsignedByteType,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.generateMipmaps=!0,this.needsUpdate=!1,this.onUpdate=null},THREE.Texture.prototype={constructor:THREE.Texture,clone:function(){var e=new THREE.Texture(this.image,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter,this.format,this.type);return e.offset.copy(this.offset),e.repeat.copy(this.repeat),e}},THREE.TextureCount=0,THREE.MultiplyOperation=0,THREE.MixOperation=1,THREE.CubeReflectionMapping=function(){},THREE.CubeRefractionMapping=function(){},THREE.LatitudeReflectionMapping=function(){},THREE.LatitudeRefractionMapping=function(){},THREE.SphericalReflectionMapping=function(){},THREE.SphericalRefractionMapping=function(){},THREE.UVMapping=function(){},THREE.RepeatWrapping=0,THREE.ClampToEdgeWrapping=1,THREE.MirroredRepeatWrapping=2,THREE.NearestFilter=3,THREE.NearestMipMapNearestFilter=4,THREE.NearestMipMapLinearFilter=5,THREE.LinearFilter=6,THREE.LinearMipMapNearestFilter=7,THREE.LinearMipMapLinearFilter=8,THREE.ByteType=9,THREE.UnsignedByteType=10,THREE.ShortType=11,THREE.UnsignedShortType=12,THREE.IntType=13,THREE.UnsignedIntType=14,THREE.FloatType=15,THREE.AlphaFormat=16,THREE.RGBFormat=17,THREE.RGBAFormat=18,THREE.LuminanceFormat=19,THREE.LuminanceAlphaFormat=20,THREE.DataTexture=function(e,t,n,r,i,s,o,u,a,f){THREE.Texture.call(this,null,s,o,u,a,f,r,i),this.image={data:e,width:t,height:n}},THREE.DataTexture.prototype=new THREE.Texture,THREE.DataTexture.prototype.constructor=THREE.DataTexture,THREE.DataTexture.prototype.clone=function(){var e=new THREE.DataTexture(this.image.data,this.image.width,this.image.height,this.format,this.type,this.mapping,this.wrapS,this.wrapT,this.magFilter,this.minFilter);return e.offset.copy(this.offset),e.repeat.copy(this.repeat),e},THREE.Particle=function(e){THREE.Object3D.call(this),this.material=e},THREE.Particle.prototype=new THREE.Object3D,THREE.Particle.prototype.constructor=THREE.Particle,THREE.ParticleSystem=function(e,t){THREE.Object3D.call(this),this.geometry=e,this.material=void 0!==t?t:new THREE.ParticleBasicMaterial({color:16777215*Math.random()}),this.sortParticles=!1,this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=e.boundingSphere.radius),this.frustumCulled=!1},THREE.ParticleSystem.prototype=new THREE.Object3D,THREE.ParticleSystem.prototype.constructor=THREE.ParticleSystem,THREE.Line=function(e,t,n){THREE.Object3D.call(this),this.geometry=e,this.material=void 0!==t?t:new THREE.LineBasicMaterial({color:16777215*Math.random()}),this.type=void 0!==n?n:THREE.LineStrip,this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())},THREE.LineStrip=0,THREE.LinePieces=1,THREE.Line.prototype=new THREE.Object3D,THREE.Line.prototype.constructor=THREE.Line,THREE.Mesh=function(e,t){THREE.Object3D.call(this),this.geometry=e,this.material=void 0!==t?t:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});if(this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere(),this.boundRadius=e.boundingSphere.radius,this.geometry.morphTargets.length)){this.morphTargetBase=-1,this.morphTargetForcedOrder=[],this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var n=0;n<this.geometry.morphTargets.length;n++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[n].name]=n}},THREE.Mesh.prototype=new THREE.Object3D,THREE.Mesh.prototype.constructor=THREE.Mesh,THREE.Mesh.prototype.supr=THREE.Object3D.prototype,THREE.Mesh.prototype.getMorphTargetIndexByName=function(e){return void 0!==this.morphTargetDictionary[e]?this.morphTargetDictionary[e]:(console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+e+" does not exist. Returning 0."),0)},THREE.Bone=function(e){THREE.Object3D.call(this),this.skin=e,this.skinMatrix=new THREE.Matrix4},THREE.Bone.prototype=new THREE.Object3D,THREE.Bone.prototype.constructor=THREE.Bone,THREE.Bone.prototype.supr=THREE.Object3D.prototype,THREE.Bone.prototype.update=function(e,t){this.matrixAutoUpdate&&(t|=this.updateMatrix());if(t||this.matrixWorldNeedsUpdate)e?this.skinMatrix.multiply(e,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0;var n,r=this.children.length;for(n=0;n<r;n++)this.children[n].update(this.skinMatrix,t)},THREE.SkinnedMesh=function(e,t){THREE.Mesh.call(this,e,t),this.identityMatrix=new THREE.Matrix4,this.bones=[],this.boneMatrices=[];var n,r,i,s,o,u;if(void 0!==this.geometry.bones){for(n=0;n<this.geometry.bones.length;n++)i=this.geometry.bones[n],s=i.pos,o=i.rotq,u=i.scl,r=this.addBone(),r.name=i.name,r.position.set(s[0],s[1],s[2]),r.quaternion.set(o[0],o[1],o[2],o[3]),r.useQuaternion=!0,void 0!==u?r.scale.set(u[0],u[1],u[2]):r.scale.set(1,1,1);for(n=0;n<this.bones.length;n++)i=this.geometry.bones[n],r=this.bones[n],-1===i.parent?this.add(r):this.bones[i.parent].add(r);this.boneMatrices=new Float32Array(16*this.bones.length),this.pose()}},THREE.SkinnedMesh.prototype=new THREE.Mesh,THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh,THREE.SkinnedMesh.prototype.addBone=function(e){return void 0===e&&(e=new THREE.Bone(this)),this.bones.push(e),e},THREE.SkinnedMesh.prototype.updateMatrixWorld=function(e){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||e)this.parent?this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var e=0,t=this.children.length;e<t;e++){var n=this.children[e];n instanceof THREE.Bone?n.update(this.identityMatrix,!1):n.updateMatrixWorld(!0)}for(var t=this.bones.length,n=this.bones,r=this.boneMatrices,e=0;e<t;e++)n[e].skinMatrix.flattenToArrayOffset(r,16*e)},THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var e,t=[],n=0;n<this.bones.length;n++){e=this.bones[n];var r=new THREE.Matrix4;r.getInverse(e.skinMatrix),t.push(r),e.skinMatrix.flattenToArrayOffset(this.boneMatrices,16*n)}if(void 0===this.geometry.skinVerticesA){this.geometry.skinVerticesA=[],this.geometry.skinVerticesB=[];for(e=0;e<this.geometry.skinIndices.length;e++){var n=this.geometry.vertices[e].position,i=this.geometry.skinIndices[e].x,s=this.geometry.skinIndices[e].y,r=new THREE.Vector3(n.x,n.y,n.z);this.geometry.skinVerticesA.push(t[i].multiplyVector3(r)),r=new THREE.Vector3(n.x,n.y,n.z),this.geometry.skinVerticesB.push(t[s].multiplyVector3(r)),1!==this.geometry.skinWeights[e].x+this.geometry.skinWeights[e].y&&(n=.5*(1-(this.geometry.skinWeights[e].x+this.geometry.skinWeights[e].y)),this.geometry.skinWeights[e].x+=n,this.geometry.skinWeights[e].y+=n)}}},THREE.Ribbon=function(e,t){THREE.Object3D.call(this),this.geometry=e,this.material=t},THREE.Ribbon.prototype=new THREE.Object3D,THREE.Ribbon.prototype.constructor=THREE.Ribbon,THREE.LOD=function(){THREE.Object3D.call(this),this.LODs=[]},THREE.LOD.prototype=new THREE.Object3D,THREE.LOD.prototype.constructor=THREE.LOD,THREE.LOD.prototype.supr=THREE.Object3D.prototype,THREE.LOD.prototype.addLevel=function(e,t){void 0===t&&(t=0);for(var t=Math.abs(t),n=0;n<this.LODs.length&&!(t<this.LODs[n].visibleAtDistance);n++);this.LODs.splice(n,0,{visibleAtDistance:t,object3D:e}),this.add(e)},THREE.LOD.prototype.update=function(e){if(1<this.LODs.length){e.matrixWorldInverse.getInverse(e.matrixWorld),e=e.matrixWorldInverse,e=-(e.n31*this.matrixWorld.n14+e.n32*this.matrixWorld.n24+e.n33*this.matrixWorld.n34+e.n34),this.LODs[0].object3D.visible=!0;for(var t=1;t<this.LODs.length;t++){if(!(e>=this.LODs[t].visibleAtDistance))break;this.LODs[t-1].object3D.visible=!1,this.LODs[t].object3D.visible=!0}for(;t<this.LODs.length;t++)this.LODs[t].object3D.visible=!1}},THREE.Sprite=function(e){THREE.Object3D.call(this),this.color=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(16777215),this.map=void 0!==e.map?e.map:new THREE.Texture,this.blending=void 0!==e.blending?e.blending:THREE.NormalBlending,this.useScreenCoordinates=void 0!==e.useScreenCoordinates?e.useScreenCoordinates:!0,this.mergeWith3D=void 0!==e.mergeWith3D?e.mergeWith3D:!this.useScreenCoordinates,this.affectedByDistance=void 0!==e.affectedByDistance?e.affectedByDistance:!this.useScreenCoordinates,this.scaleByViewport=void 0!==e.scaleByViewport?e.scaleByViewport:!this.affectedByDistance,this.alignment=e.alignment instanceof THREE.Vector2?e.alignment:THREE.SpriteAlignment.center,this.rotation3d=this.rotation,this.rotation=0,this.opacity=1,this.uvOffset=new THREE.Vector2(0,0),this.uvScale=new THREE.Vector2(1,1)},THREE.Sprite.prototype=new THREE.Object3D,THREE.Sprite.prototype.constructor=THREE.Sprite,THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position),this.rotation3d.set(0,0,this.rotation),this.matrix.setRotationFromEuler(this.rotation3d);if(1!==this.scale.x||1!==this.scale.y)this.matrix.scale(this.scale),this.boundRadiusScale=Math.max(this.scale.x,this.scale.y);this.matrixWorldNeedsUpdate=!0},THREE.SpriteAlignment={},THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1),THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1),THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1),THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0),THREE.SpriteAlignment.center=new THREE.Vector2(0,0),THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0),THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1),THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1),THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1),THREE.Scene=function(){THREE.Object3D.call(this),this.overrideMaterial=this.fog=null,this.matrixAutoUpdate=!1,this.__objects=[],this.__lights=[],this.__objectsAdded=[],this.__objectsRemoved=[]},THREE.Scene.prototype=new THREE.Object3D,THREE.Scene.prototype.constructor=THREE.Scene,THREE.Scene.prototype.__addObject=function(e){if(e instanceof THREE.Light)-1===this.__lights.indexOf(e)&&this.__lights.push(e);else if(!(e instanceof THREE.Camera||e instanceof THREE.Bone)&&-1===this.__objects.indexOf(e)){this.__objects.push(e),this.__objectsAdded.push(e);var t=this.__objectsRemoved.indexOf(e);-1!==t&&this.__objectsRemoved.splice(t,1)}for(t=0;t<e.children.length;t++)this.__addObject(e.children[t])},THREE.Scene.prototype.__removeObject=function(e){if(e instanceof THREE.Light){var t=this.__lights.indexOf(e);-1!==t&&this.__lights.splice(t,1)}else e instanceof THREE.Camera||(t=this.__objects.indexOf(e),-1!==t&&(this.__objects.splice(t,1),this.__objectsRemoved.push(e),t=this.__objectsAdded.indexOf(e),-1!==t&&this.__objectsAdded.splice(t,1)));for(t=0;t<e.children.length;t++)this.__removeObject(e.children[t])},THREE.Fog=function(e,t,n){this.color=new THREE.Color(e),this.near=void 0!==t?t:1,this.far=void 0!==n?n:1e3},THREE.FogExp2=function(e,t){this.color=new THREE.Color(e),this.density=void 0!==t?t:25e-5},THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity );\n} else {\ngl_FragColor.xyz = gl_FragColor.xyz * cubeColor.xyz;\n}\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif",map_pars_vertex:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",map_vertex:"#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( map, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor;\n#endif",lights_phong_pars_vertex:"#if MAX_POINT_LIGHTS > 0\n#ifndef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif",lights_phong_vertex:"#if MAX_POINT_LIGHTS > 0\n#ifndef PHONG_PER_PIXEL\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif",lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif",skinning_vertex:"#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * modelViewMatrix * gl_Position;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif",default_vertex:"#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\nvec3 transformedNormal = normalMatrix * morphedNormal;\n#else\nvec3 transformedNormal = normalMatrix * normal;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n#ifdef USE_MORPHTARGETS\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( morphed, 1.0 );\n#else\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n#endif\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"},THREE.UniformsUtils={merge:function(e){var t,n,r,i={};for(t=0;t<e.length;t++)for(n in r=this.clone(e[t]),r)i[n]=r[n];return i},clone:function(e){var t,n,r,i={};for(t in e)for(n in i[t]={},e[t])r=e[t][n],i[t][n]=r instanceof THREE.Color||r instanceof THREE.Vector2||r instanceof THREE.Vector3||r instanceof THREE.Vector4||r instanceof THREE.Matrix4||r instanceof THREE.Texture?r.clone():r instanceof Array?r.slice():r;return i}},THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:0,texture:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:2,texture:null},envMap:{type:"t",value:1,texture:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},fog:{fogDensity:{type:"f",value:25e-5},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:0,texture:null},fogDensity:{type:"f",value:25e-5},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:6,texture:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}},THREE.ShaderLib={depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2e3},opacity:{type:"f",value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(328965)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["varying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(328965)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["varying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.color_vertex,"#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.morphnormal_vertex,"vNormal = transformedNormal;",THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}},THREE.WebGLRenderer=function(e){function t(e,t){var n=e.vertices.length,r=t.material;if(r.attributes){void 0===e.__webglCustomAttributesList&&(e.__webglCustomAttributesList=[]);for(var i in r.attributes){var s=r.attributes[i];if(!s.__webglInitialized||s.createUniqueBuffers){s.__webglInitialized=!0;var o=1;"v2"===s.type?o=2:"v3"===s.type?o=3:"v4"===s.type?o=4:"c"===s.type&&(o=3),s.size=o,s.array=new Float32Array(n*o),s.buffer=P.createBuffer(),s.buffer.belongsToAttribute=i,s.needsUpdate=!0}e.__webglCustomAttributesList.push(s)}}}function n(e,t){if(!(!e.material||e.material instanceof THREE.MeshFaceMaterial))return e.material;if(0<=t.materialIndex)return e.geometry.materials[t.materialIndex]}function r(e){return e instanceof THREE.MeshBasicMaterial&&!e.envMap||e instanceof THREE.MeshDepthMaterial?!1:e&&void 0!==e.shading&&e.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function i(e){return e.map||e.lightMap||e instanceof THREE.ShaderMaterial?!0:!1}function s(e,t,n){var r,i,s,o,u=e.vertices;o=u.length;var a=e.colors,f=a.length,l=e.__vertexArray,c=e.__colorArray,h=e.__sortArray,p=e.__dirtyVertices,d=e.__dirtyColors,v=e.__webglCustomAttributesList;if(n.sortParticles){it.multiplySelf(n.matrixWorld);for(r=0;r<o;r++)i=u[r].position,st.copy(i),it.multiplyVector3(st),h[r]=[st.z,r];h.sort(function(e,t){return t[0]-e[0]});for(r=0;r<o;r++)i=u[h[r][1]].position,s=3*r,l[s]=i.x,l[s+1]=i.y,l[s+2]=i.z;for(r=0;r<f;r++)s=3*r,i=a[h[r][1]],c[s]=i.r,c[s+1]=i.g,c[s+2]=i.b;if(v)for(a=0,f=v.length;a<f;a++)if(u=v[a],void 0===u.boundTo||"vertices"===u.boundTo)if(s=0,i=u.value.length,1===u.size)for(r=0;r<i;r++)o=h[r][1],u.array[r]=u.value[o];else if(2===u.size)for(r=0;r<i;r++)o=h[r][1],o=u.value[o],u.array[s]=o.x,u.array[s+1]=o.y,s+=2;else if(3===u.size)if("c"===u.type)for(r=0;r<i;r++)o=h[r][1],o=u.value[o],u.array[s]=o.r,u.array[s+1]=o.g,u.array[s+2]=o.b,s+=3;else for(r=0;r<i;r++)o=h[r][1],o=u.value[o],u.array[s]=o.x,u.array[s+1]=o.y,u.array[s+2]=o.z,s+=3;else if(4===u.size)for(r=0;r<i;r++)o=h[r][1],o=u.value[o],u.array[s]=o.x,u.array[s+1]=o.y,u.array[s+2]=o.z,u.array[s+3]=o.w,s+=4}else{if(p)for(r=0;r<o;r++)i=u[r].position,s=3*r,l[s]=i.x,l[s+1]=i.y,l[s+2]=i.z;if(d)for(r=0;r<f;r++)i=a[r],s=3*r,c[s]=i.r,c[s+1]=i.g,c[s+2]=i.b;if(v)for(a=0,f=v.length;a<f;a++)if(u=v[a],u.needsUpdate&&(void 0===u.boundTo||"vertices"===u.boundTo))if(i=u.value.length,s=0,1===u.size)for(r=0;r<i;r++)u.array[r]=u.value[r];else if(2===u.size)for(r=0;r<i;r++)o=u.value[r],u.array[s]=o.x,u.array[s+1]=o.y,s+=2;else if(3===u.size)if("c"===u.type)for(r=0;r<i;r++)o=u.value[r],u.array[s]=o.r,u.array[s+1]=o.g,u.array[s+2]=o.b,s+=3;else for(r=0;r<i;r++)o=u.value[r],u.array[s]=o.x,u.array[s+1]=o.y,u.array[s+2]=o.z,s+=3;else if(4===u.size)for(r=0;r<i;r++)o=u.value[r],u.array[s]=o.x,u.array[s+1]=o.y,u.array[s+2]=o.z,u.array[s+3]=o.w,s+=4}if(p||n.sortParticles)P.bindBuffer(P.ARRAY_BUFFER,e.__webglVertexBuffer),P.bufferData(P.ARRAY_BUFFER,l,t);if(d||n.sortParticles)P.bindBuffer(P.ARRAY_BUFFER,e.__webglColorBuffer),P.bufferData(P.ARRAY_BUFFER,c,t);if(v)for(a=0,f=v.length;a<f;a++)if(u=v[a],u.needsUpdate||n.sortParticles)P.bindBuffer(P.ARRAY_BUFFER,u.buffer),P.bufferData(P.ARRAY_BUFFER,u.array,t)}function o(e,t){return t.z-e.z}function u(e,t,n){if(e.length)for(var r=0,i=e.length;r<i;r++)q=B=null,F=I=V=X=W=-1,e[r].render(t,n,tt,nt),q=B=null,F=I=V=X=W=-1}function a(e,t,n,r,i,s,o,u){var a,f,l,c;t?(f=e.length-1,c=t=-1):(f=0,t=e.length,c=1);for(var h=f;h!==t;h+=c)if(a=e[h],a.render){f=a.object,l=a.buffer;if(u)a=u;else{a=a[n];if(!a)continue;o&&D.setBlending(a.blending),D.setDepthTest(a.depthTest),D.setDepthWrite(a.depthWrite),g(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}D.setObjectFaces(f),l instanceof THREE.BufferGeometry?D.renderBufferDirect(r,i,s,a,l,f):D.renderBuffer(r,i,s,a,l,f)}}function f(e,t,n,r,i,s,o){for(var u,a,f=0,l=e.length;f<l;f++)if(u=e[f],a=u.object,a.visible){if(o)u=o;else{u=u[t];if(!u)continue;s&&D.setBlending(u.blending),D.setDepthTest(u.depthTest),D.setDepthWrite(u.depthWrite),g(u.polygonOffset,u.polygonOffsetFactor,u.polygonOffsetUnits)}D.renderImmediateObject(n,r,i,u,a)}}function l(e,t,n){e.push({buffer:t,object:n,opaque:null,transparent:null})}function c(e){for(var t in e.attributes)if(e.attributes[t].needsUpdate)return!0;return!1}function h(e){for(var t in e.attributes)e.attributes[t].needsUpdate=!1}function p(e,t){for(var n=e.length-1;0<=n;n--)e[n].object===t&&e.splice(n,1)}function d(e,t){for(var n=e.length-1;0<=n;n--)e[n]===t&&e.splice(n,1)}function v(e,t,n,r,i){r.program||D.initMaterial(r,t,n,i);if(r.morphTargets&&!i.__webglMorphTargetInfluences){i.__webglMorphTargetInfluences=new Float32Array(D.maxMorphTargets);for(var s=0,o=D.maxMorphTargets;s<o;s++)i.__webglMorphTargetInfluences[s]=0}var u=!1,s=r.program,o=s.uniforms,a=r.uniforms;s!==B&&(P.useProgram(s),B=s,u=!0),r.id!==F&&(F=r.id,u=!0);if(u||e!==q)P.uniformMatrix4fv(o.projectionMatrix,!1,e._projectionMatrixArray),e!==q&&(q=e);if(u){n&&r.fog&&((a.fogColor.value=n.color,n instanceof THREE.Fog)?(a.fogNear.value=n.near,a.fogFar.value=n.far):n instanceof THREE.FogExp2&&(a.fogDensity.value=n.density));if(r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshLambertMaterial||r.lights){var f,l=0,c=0,h=0,p,d,v,m=ut,g=m.directional.colors,y=m.directional.positions,w=m.point.colors,E=m.point.positions,T=m.point.distances,N=0,C=0,k=v=0;for(n=0,u=t.length;n<u;n++)if(f=t[n],!f.onlyShadow)if(p=f.color,d=f.intensity,v=f.distance,f instanceof THREE.AmbientLight)D.gammaInput?(l+=p.r*p.r,c+=p.g*p.g,h+=p.b*p.b):(l+=p.r,c+=p.g,h+=p.b);else if(f instanceof THREE.DirectionalLight)v=3*N,D.gammaInput?(g[v]=p.r*p.r*d*d,g[v+1]=p.g*p.g*d*d,g[v+2]=p.b*p.b*d*d):(g[v]=p.r*d,g[v+1]=p.g*d,g[v+2]=p.b*d),ot.copy(f.matrixWorld.getPosition()),ot.subSelf(f.target.matrixWorld.getPosition()),ot.normalize(),y[v]=ot.x,y[v+1]=ot.y,y[v+2]=ot.z,N+=1;else if(f instanceof THREE.PointLight||f instanceof THREE.SpotLight)k=3*C,D.gammaInput?(w[k]=p.r*p.r*d*d,w[k+1]=p.g*p.g*d*d,w[k+2]=p.b*p.b*d*d):(w[k]=p.r*d,w[k+1]=p.g*d,w[k+2]=p.b*d),f=f.matrixWorld.getPosition(),E[k]=f.x,E[k+1]=f.y,E[k+2]=f.z,T[C]=v,C+=1;for(n=3*N,u=g.length;n<u;n++)g[n]=0;for(n=3*C,u=w.length;n<u;n++)w[n]=0;m.point.length=C,m.directional.length=N,m.ambient[0]=l,m.ambient[1]=c,m.ambient[2]=h,n=ut,a.ambientLightColor.value=n.ambient,a.directionalLightColor.value=n.directional.colors,a.directionalLightDirection.value=n.directional.positions,a.pointLightColor.value=n.point.colors,a.pointLightPosition.value=n.point.positions,a.pointLightDistance.value=n.point.distances}if(r instanceof THREE.MeshBasicMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.MeshPhongMaterial)a.opacity.value=r.opacity,D.gammaInput?a.diffuse.value.copyGammaToLinear(r.color):a.diffuse.value=r.color,(a.map.texture=r.map)&&a.offsetRepeat.value.set(r.map.offset.x,r.map.offset.y,r.map.repeat.x,r.map.repeat.y),a.lightMap.texture=r.lightMap,a.envMap.texture=r.envMap,a.flipEnvMap.value=r.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,a.reflectivity.value=r.reflectivity,a.refractionRatio.value=r.refractionRatio,a.combine.value=r.combine,a.useRefract.value=r.envMap&&r.envMap.mapping instanceof THREE.CubeRefractionMapping;r instanceof THREE.LineBasicMaterial?(a.diffuse.value=r.color,a.opacity.value=r.opacity):r instanceof THREE.ParticleBasicMaterial?(a.psColor.value=r.color,a.opacity.value=r.opacity,a.size.value=r.size,a.scale.value=x.height/2,a.map.texture=r.map):r instanceof THREE.MeshPhongMaterial?(a.shininess.value=r.shininess,D.gammaInput?(a.ambient.value.copyGammaToLinear(r.ambient),a.specular.value.copyGammaToLinear(r.specular)):(a.ambient.value=r.ambient,a.specular.value=r.specular),r.wrapAround&&a.wrapRGB.value.copy(r.wrapRGB)):r instanceof THREE.MeshLambertMaterial?(D.gammaInput?a.ambient.value.copyGammaToLinear(r.ambient):a.ambient.value=r.ambient,r.wrapAround&&a.wrapRGB.value.copy(r.wrapRGB)):r instanceof THREE.MeshDepthMaterial?(a.mNear.value=e.near,a.mFar.value=e.far,a.opacity.value=r.opacity):r instanceof THREE.MeshNormalMaterial&&(a.opacity.value=r.opacity);if(i.receiveShadow&&!r._shadowPass&&a.shadowMatrix){u=n=0;for(l=t.length;u<l;u++)if(c=t[u],c.castShadow&&(c instanceof THREE.SpotLight||c instanceof THREE.DirectionalLight&&!c.shadowCascade))a.shadowMap.texture[n]=c.shadowMap,a.shadowMapSize.value[n]=c.shadowMapSize,a.shadowMatrix.value[n]=c.shadowMatrix,a.shadowDarkness.value[n]=c.shadowDarkness,a.shadowBias.value[n]=c.shadowBias,n++}t=r.uniformsList;for(a=0,n=t.length;a<n;a++)if(c=s.uniforms[t[a][1]])if(u=t[a][0],h=u.type,l=u.value,"i"===h)P.uniform1i(c,l);else if("f"===h)P.uniform1f(c,l);else if("v2"===h)P.uniform2f(c,l.x,l.y);else if("v3"===h)P.uniform3f(c,l.x,l.y,l.z);else if("v4"===h)P.uniform4f(c,l.x,l.y,l.z,l.w);else if("c"===h)P.uniform3f(c,l.r,l.g,l.b);else if("fv1"===h)P.uniform1fv(c,l);else if("fv"===h)P.uniform3fv(c,l);else if("v2v"===h){u._array||(u._array=new Float32Array(2*l.length));for(h=0,m=l.length;h<m;h++)g=2*h,u._array[g]=l[h].x,u._array[g+1]=l[h].y;P.uniform2fv(c,u._array)}else if("v3v"===h){u._array||(u._array=new Float32Array(3*l.length));for(h=0,m=l.length;h<m;h++)g=3*h,u._array[g]=l[h].x,u._array[g+1]=l[h].y,u._array[g+2]=l[h].z;P.uniform3fv(c,u._array)}else if("v4v"==h){u._array||(u._array=new Float32Array(4*l.length));for(h=0,m=l.length;h<m;h++)g=4*h,u._array[g]=l[h].x,u._array[g+1]=l[h].y,u._array[g+2]=l[h].z,u._array[g+3]=l[h].w;P.uniform4fv(c,u._array)}else if("m4"===h)u._array||(u._array=new Float32Array(16)),l.flattenToArray(u._array),P.uniformMatrix4fv(c,!1,u._array);else if("m4v"===h){u._array||(u._array=new Float32Array(16*l.length));for(h=0,m=l.length;h<m;h++)l[h].flattenToArrayOffset(u._array,16*h);P.uniformMatrix4fv(c,!1,u._array)}else if("t"===h){if(P.uniform1i(c,l),c=u.texture)if(c.image instanceof Array&&6===c.image.length){if(u=c,6===u.image.length)if(u.needsUpdate){u.image.__webglTextureCube||(u.image.__webglTextureCube=P.createTexture()),P.activeTexture(P.TEXTURE0+l),P.bindTexture(P.TEXTURE_CUBE_MAP,u.image.__webglTextureCube),l=[];for(c=0;6>c;c++){h=l,m=c;if(D.autoScaleCubemaps){if(g=u.image[c],w=ft,!(g.width<=w&&g.height<=w))E=Math.max(g.width,g.height),y=Math.floor(g.width*w/E),w=Math.floor(g.height*w/E),E=document.createElement("canvas"),E.width=y,E.height=w,E.getContext("2d").drawImage(g,0,0,g.width,g.height,0,0,y,w),g=E}else g=u.image[c];h[m]=g}c=l[0],h=0===(c.width&c.width-1)&&0===(c.height&c.height-1),m=S(u.format),g=S(u.type),b(P.TEXTURE_CUBE_MAP,u,h);for(c=0;6>c;c++)P.texImage2D(P.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,m,m,g,l[c]);u.generateMipmaps&&h&&P.generateMipmap(P.TEXTURE_CUBE_MAP),u.needsUpdate=!1,u.onUpdate&&u.onUpdate()}else P.activeTexture(P.TEXTURE0+l),P.bindTexture(P.TEXTURE_CUBE_MAP,u.image.__webglTextureCube)}else c instanceof THREE.WebGLRenderTargetCube?(u=c,P.activeTexture(P.TEXTURE0+l),P.bindTexture(P.TEXTURE_CUBE_MAP,u.__webglTexture)):D.setTexture(c,l)}else if("tv"===h){if(!u._array){u._array=[];for(h=0,m=u.texture.length;h<m;h++)u._array[h]=l+h}P.uniform1iv(c,u._array);for(h=0,m=u.texture.length;h<m;h++)(c=u.texture[h])&&D.setTexture(c,u._array[h])}(r instanceof THREE.ShaderMaterial||r instanceof THREE.MeshPhongMaterial||r.envMap)&&null!==o.cameraPosition&&(t=e.matrixWorld.getPosition(),P.uniform3f(o.cameraPosition,t.x,t.y,t.z)),(r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.ShaderMaterial||r.skinning)&&null!==o.viewMatrix&&P.uniformMatrix4fv(o.viewMatrix,!1,e._viewMatrixArray),r.skinning&&P.uniformMatrix4fv(o.boneGlobalMatrices,!1,i.boneMatrices)}return P.uniformMatrix4fv(o.modelViewMatrix,!1,i._modelViewMatrixArray),o.normalMatrix&&P.uniformMatrix3fv(o.normalMatrix,!1,i._normalMatrixArray),(r instanceof THREE.ShaderMaterial||r.envMap||r.skinning||i.receiveShadow)&&null!==o.objectMatrix&&P.uniformMatrix4fv(o.objectMatrix,!1,i._objectMatrixArray),s}function m(e,t){e._modelViewMatrix.multiplyToArray(t.matrixWorldInverse,e.matrixWorld,e._modelViewMatrixArray);var n=THREE.Matrix4.makeInvert3x3(e._modelViewMatrix);n&&n.transposeIntoArray(e._normalMatrixArray)}function g(e,t,n){$!==e&&(e?P.enable(P.POLYGON_OFFSET_FILL):P.disable(P.POLYGON_OFFSET_FILL),$=e),e&&(J!==t||K!==n)&&(P.polygonOffset(t,n),J=t,K=n)}function y(e,t){var n;return"fragment"===e?n=P.createShader(P.FRAGMENT_SHADER):"vertex"===e&&(n=P.createShader(P.VERTEX_SHADER)),P.shaderSource(n,t),P.compileShader(n),P.getShaderParameter(n,P.COMPILE_STATUS)?n:(console.error(P.getShaderInfoLog(n)),console.error(t),null)}function b(e,t,n){n?(P.texParameteri(e,P.TEXTURE_WRAP_S,S(t.wrapS)),P.texParameteri(e,P.TEXTURE_WRAP_T,S(t.wrapT)),P.texParameteri(e,P.TEXTURE_MAG_FILTER,S(t.magFilter)),P.texParameteri(e,P.TEXTURE_MIN_FILTER,S(t.minFilter))):(P.texParameteri(e,P.TEXTURE_WRAP_S,P.CLAMP_TO_EDGE),P.texParameteri(e,P.TEXTURE_WRAP_T,P.CLAMP_TO_EDGE),P.texParameteri(e,P.TEXTURE_MAG_FILTER,E(t.magFilter)),P.texParameteri(e,P.TEXTURE_MIN_FILTER,E(t.minFilter)))}function w(e,t){P.bindRenderbuffer(P.RENDERBUFFER,e),t.depthBuffer&&!t.stencilBuffer?(P.renderbufferStorage(P.RENDERBUFFER,P.DEPTH_COMPONENT16,t.width,t.height),P.framebufferRenderbuffer(P.FRAMEBUFFER,P.DEPTH_ATTACHMENT,P.RENDERBUFFER,e)):t.depthBuffer&&t.stencilBuffer?(P.renderbufferStorage(P.RENDERBUFFER,P.DEPTH_STENCIL,t.width,t.height),P.framebufferRenderbuffer(P.FRAMEBUFFER,P.DEPTH_STENCIL_ATTACHMENT,P.RENDERBUFFER,e)):P.renderbufferStorage(P.RENDERBUFFER,P.RGBA4,t.width,t.height)}function E(e){switch(e){case THREE.NearestFilter:case THREE.NearestMipMapNearestFilter:case THREE.NearestMipMapLinearFilter:return P.NEAREST;default:return P.LINEAR}}function S(e){switch(e){case THREE.RepeatWrapping:return P.REPEAT;case THREE.ClampToEdgeWrapping:return P.CLAMP_TO_EDGE;case THREE.MirroredRepeatWrapping:return P.MIRRORED_REPEAT;case THREE.NearestFilter:return P.NEAREST;case THREE.NearestMipMapNearestFilter:return P.NEAREST_MIPMAP_NEAREST;case THREE.NearestMipMapLinearFilter:return P.NEAREST_MIPMAP_LINEAR;case THREE.LinearFilter:return P.LINEAR;case THREE.LinearMipMapNearestFilter:return P.LINEAR_MIPMAP_NEAREST;case THREE.LinearMipMapLinearFilter:return P.LINEAR_MIPMAP_LINEAR;case THREE.ByteType:return P.BYTE;case THREE.UnsignedByteType:return P.UNSIGNED_BYTE;case THREE.ShortType:return P.SHORT;case THREE.UnsignedShortType:return P.UNSIGNED_SHORT;case THREE.IntType:return P.INT;case THREE.UnsignedIntType:return P.UNSIGNED_INT;case THREE.FloatType:return P.FLOAT;case THREE.AlphaFormat:return P.ALPHA;case THREE.RGBFormat:return P.RGB;case THREE.RGBAFormat:return P.RGBA;case THREE.LuminanceFormat:return P.LUMINANCE;case THREE.LuminanceAlphaFormat:return P.LUMINANCE_ALPHA}return 0}var e=e||{},x=void 0!==e.canvas?e.canvas:document.createElement("canvas"),T=void 0!==e.precision?e.precision:"mediump",N=void 0!==e.alpha?e.alpha:!0,C=void 0!==e.premultipliedAlpha?e.premultipliedAlpha:!0,k=void 0!==e.antialias?e.antialias:!1,L=void 0!==e.stencil?e.stencil:!0,A=void 0!==e.preserveDrawingBuffer?e.preserveDrawingBuffer:!1,O=void 0!==e.clearColor?new THREE.Color(e.clearColor):new THREE.Color(0),M=void 0!==e.clearAlpha?e.clearAlpha:0,_=void 0!==e.maxLights?e.maxLights:4;this.domElement=x,this.context=null,this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0,this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1,this.shadowMapCullFrontFaces=this.shadowMapSoft=this.shadowMapAutoUpdate=!0,this.shadowMapCascade=this.shadowMapDebug=!1,this.maxMorphTargets=8,this.maxMorphNormals=4,this.autoScaleCubemaps=!0,this.renderPluginsPre=[],this.renderPluginsPost=[],this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var D=this,P,H=[],B=null,j=null,F=-1,I=null,q=null,R=0,U=null,z=null,W=null,X=null,V=null,$=null,J=null,K=null,Q=null,G=0,Y=0,Z=0,et=0,tt=0,nt=0,rt=new THREE.Frustum,it=new THREE.Matrix4,st=new THREE.Vector4,ot=new THREE.Vector3,ut={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]}};P=function(){var e;try{if(!(e=x.getContext("experimental-webgl",{alpha:N,premultipliedAlpha:C,antialias:k,stencil:L,preserveDrawingBuffer:A})))throw"Error creating WebGL context.";console.log(navigator.userAgent+" | "+e.getParameter(e.VERSION)+" | "+e.getParameter(e.VENDOR)+" | "+e.getParameter(e.RENDERER)+" | "+e.getParameter(e.SHADING_LANGUAGE_VERSION))}catch(t){console.error(t)}return e}(),P.clearColor(0,0,0,1),P.clearDepth(1),P.clearStencil(0),P.enable(P.DEPTH_TEST),P.depthFunc(P.LEQUAL),P.frontFace(P.CCW),P.cullFace(P.BACK),P.enable(P.CULL_FACE),P.enable(P.BLEND),P.blendEquation(P.FUNC_ADD),P.blendFunc(P.SRC_ALPHA,P.ONE_MINUS_SRC_ALPHA),P.clearColor(O.r,O.g,O.b,M),this.context=P;var at=P.getParameter(P.MAX_VERTEX_TEXTURE_IMAGE_UNITS);P.getParameter(P.MAX_TEXTURE_SIZE);var ft=P.getParameter(P.MAX_CUBE_MAP_TEXTURE_SIZE);this.getContext=function(){return P},this.supportsVertexTextures=function(){return 0<at},this.setSize=function(e,t){x.width=e,x.height=t,this.setViewport(0,0,x.width,x.height)},this.setViewport=function(e,t,n,r){G=e,Y=t,Z=n,et=r,P.viewport(G,Y,Z,et)},this.setScissor=function(e,t,n,r){P.scissor(e,t,n,r)},this.enableScissorTest=function(e){e?P.enable(P.SCISSOR_TEST):P.disable(P.SCISSOR_TEST)},this.setClearColorHex=function(e,t){O.setHex(e),M=t,P.clearColor(O.r,O.g,O.b,M)},this.setClearColor=function(e,t){O.copy(e),M=t,P.clearColor(O.r,O.g,O.b,M)},this.getClearColor=function(){return O},this.getClearAlpha=function(){return M},this.clear=function(e,t,n){var r=0;if(void 0===e||e)r|=P.COLOR_BUFFER_BIT;if(void 0===t||t)r|=P.DEPTH_BUFFER_BIT;if(void 0===n||n)r|=P.STENCIL_BUFFER_BIT;P.clear(r)},this.clearTarget=function(e,t,n,r){this.setRenderTarget(e),this.clear(t,n,r)},this.addPostPlugin=function(e){e.init(this),this.renderPluginsPost.push(e)},this.addPrePlugin=function(e){e.init(this),this.renderPluginsPre.push(e)},this.deallocateObject=function(e){if(e.__webglInit)if(e.__webglInit=!1,delete e._modelViewMatrix,delete e._normalMatrixArray,delete e._modelViewMatrixArray,delete e._objectMatrixArray,e instanceof THREE.Mesh)for(var t in e.geometry.geometryGroups){var n=e.geometry.geometryGroups[t];P.deleteBuffer(n.__webglVertexBuffer),P.deleteBuffer(n.__webglNormalBuffer),P.deleteBuffer(n.__webglTangentBuffer),P.deleteBuffer(n.__webglColorBuffer),P.deleteBuffer(n.__webglUVBuffer),P.deleteBuffer(n.__webglUV2Buffer),P.deleteBuffer(n.__webglSkinVertexABuffer),P.deleteBuffer(n.__webglSkinVertexBBuffer),P.deleteBuffer(n.__webglSkinIndicesBuffer),P.deleteBuffer(n.__webglSkinWeightsBuffer),P.deleteBuffer(n.__webglFaceBuffer),P.deleteBuffer(n.__webglLineBuffer);var r=void 0,i=void 0;if(n.numMorphTargets)for(r=0,i=n.numMorphTargets;r<i;r++)P.deleteBuffer(n.__webglMorphTargetsBuffers[r]);if(n.numMorphNormals)for(r=0,i=n.numMorphNormals;r<i;r++)P.deleteBuffer(n.__webglMorphNormalsBuffers[r]);if(n.__webglCustomAttributesList)for(r in r=void 0,n.__webglCustomAttributesList)P.deleteBuffer(n.__webglCustomAttributesList[r].buffer);D.info.memory.geometries--}else e instanceof THREE.Ribbon?(e=e.geometry,P.deleteBuffer(e.__webglVertexBuffer),P.deleteBuffer(e.__webglColorBuffer),D.info.memory.geometries--):e instanceof THREE.Line?(e=e.geometry,P.deleteBuffer(e.__webglVertexBuffer),P.deleteBuffer(e.__webglColorBuffer),D.info.memory.geometries--):e instanceof THREE.ParticleSystem&&(e=e.geometry,P.deleteBuffer(e.__webglVertexBuffer),P.deleteBuffer(e.__webglColorBuffer),D.info.memory.geometries--)},this.deallocateTexture=function(e){e.__webglInit&&(e.__webglInit=!1,P.deleteTexture(e.__webglTexture),D.info.memory.textures--)},this.updateShadowMap=function(e,t){B=null,F=I=V=X=W=-1,this.shadowMapPlugin.update(e,t)},this.renderBufferImmediate=function(e,t,n){e.__webglVertexBuffer||(e.__webglVertexBuffer=P.createBuffer()),e.__webglNormalBuffer||(e.__webglNormalBuffer=P.createBuffer()),e.hasPos&&(P.bindBuffer(P.ARRAY_BUFFER,e.__webglVertexBuffer),P.bufferData(P.ARRAY_BUFFER,e.positionArray,P.DYNAMIC_DRAW),P.enableVertexAttribArray(t.attributes.position),P.vertexAttribPointer(t.attributes.position,3,P.FLOAT,!1,0,0));if(e.hasNormal){P.bindBuffer(P.ARRAY_BUFFER,e.__webglNormalBuffer);if(n===THREE.FlatShading){var r,i,s,o,u,a,f,l,c,h,p=3*e.count;for(h=0;h<p;h+=9)n=e.normalArray,r=n[h],i=n[h+1],s=n[h+2],o=n[h+3],a=n[h+4],l=n[h+5],u=n[h+6],f=n[h+7],c=n[h+8],r=(r+o+u)/3,i=(i+a+f)/3,s=(s+l+c)/3,n[h]=r,n[h+1]=i,n[h+2]=s,n[h+3]=r,n[h+4]=i,n[h+5]=s,n[h+6]=r,n[h+7]=i,n[h+8]=s}P.bufferData(P.ARRAY_BUFFER,e.normalArray,P.DYNAMIC_DRAW),P.enableVertexAttribArray(t.attributes.normal),P.vertexAttribPointer(t.attributes.normal,3,P.FLOAT,!1,0,0)}P.drawArrays(P.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,r,i,s){if(0!==r.opacity&&(n=v(e,t,n,r,s),e=n.attributes,t=!1,r=16777215*i.id+2*n.id+(r.wireframe?1:0),r!==I&&(I=r,t=!0),s instanceof THREE.Mesh)){s=i.offsets,r=0;for(n=s.length;r<n;++r)t&&(P.bindBuffer(P.ARRAY_BUFFER,i.vertexPositionBuffer),P.vertexAttribPointer(e.position,i.vertexPositionBuffer.itemSize,P.FLOAT,!1,0,12*s[r].index),0<=e.normal&&i.vertexNormalBuffer&&(P.bindBuffer(P.ARRAY_BUFFER,i.vertexNormalBuffer),P.vertexAttribPointer(e.normal,i.vertexNormalBuffer.itemSize,P.FLOAT,!1,0,12*s[r].index)),0<=e.uv&&i.vertexUvBuffer&&(i.vertexUvBuffer?(P.bindBuffer(P.ARRAY_BUFFER,i.vertexUvBuffer),P.vertexAttribPointer(e.uv,i.vertexUvBuffer.itemSize,P.FLOAT,!1,0,8*s[r].index),P.enableVertexAttribArray(e.uv)):P.disableVertexAttribArray(e.uv)),0<=e.color&&i.vertexColorBuffer&&(P.bindBuffer(P.ARRAY_BUFFER,i.vertexColorBuffer),P.vertexAttribPointer(e.color,i.vertexColorBuffer.itemSize,P.FLOAT,!1,0,16*s[r].index)),P.bindBuffer(P.ELEMENT_ARRAY_BUFFER,i.vertexIndexBuffer)),P.drawElements(P.TRIANGLES,s[r].count,P.UNSIGNED_SHORT,2*s[r].start),D.info.render.calls++,D.info.render.vertices+=s[r].count,D.info.render.faces+=s[r].count/3}},this.renderBuffer=function(e,t,n,r,i,s){if(0!==r.opacity){var o,u,n=v(e,t,n,r,s),t=n.attributes,e=!1,n=16777215*i.id+2*n.id+(r.wireframe?1:0);n!==I&&(I=n,e=!0);if(!r.morphTargets&&0<=t.position)e&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglVertexBuffer),P.vertexAttribPointer(t.position,3,P.FLOAT,!1,0,0));else if(s.morphTargetBase){n=r.program.attributes,-1!==s.morphTargetBase?(P.bindBuffer(P.ARRAY_BUFFER,i.__webglMorphTargetsBuffers[s.morphTargetBase]),P.vertexAttribPointer(n.position,3,P.FLOAT,!1,0,0)):0<=n.position&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglVertexBuffer),P.vertexAttribPointer(n.position,3,P.FLOAT,!1,0,0));if(s.morphTargetForcedOrder.length){o=0;var a=s.morphTargetForcedOrder;for(u=s.morphTargetInfluences;o<r.numSupportedMorphTargets&&o<a.length;)P.bindBuffer(P.ARRAY_BUFFER,i.__webglMorphTargetsBuffers[a[o]]),P.vertexAttribPointer(n["morphTarget"+o],3,P.FLOAT,!1,0,0),r.morphNormals&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglMorphNormalsBuffers[a[o]]),P.vertexAttribPointer(n["morphNormal"+o],3,P.FLOAT,!1,0,0)),s.__webglMorphTargetInfluences[o]=u[a[o]],o++}else{var a=[],f=-1,l=0;u=s.morphTargetInfluences;var c,h=u.length;o=0;for(-1!==s.morphTargetBase&&(a[s.morphTargetBase]=!0);o<r.numSupportedMorphTargets;){for(c=0;c<h;c++)!a[c]&&u[c]>f&&(l=c,f=u[l]);P.bindBuffer(P.ARRAY_BUFFER,i.__webglMorphTargetsBuffers[l]),P.vertexAttribPointer(n["morphTarget"+o],3,P.FLOAT,!1,0,0),r.morphNormals&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglMorphNormalsBuffers[l]),P.vertexAttribPointer(n["morphNormal"+o],3,P.FLOAT,!1,0,0)),s.__webglMorphTargetInfluences[o]=f,a[l]=1,f=-1,o++}}null!==r.program.uniforms.morphTargetInfluences&&P.uniform1fv(r.program.uniforms.morphTargetInfluences,s.__webglMorphTargetInfluences)}if(e){if(i.__webglCustomAttributesList)for(o=0,u=i.__webglCustomAttributesList.length;o<u;o++)n=i.__webglCustomAttributesList[o],0<=t[n.buffer.belongsToAttribute]&&(P.bindBuffer(P.ARRAY_BUFFER,n.buffer),P.vertexAttribPointer(t[n.buffer.belongsToAttribute],n.size,P.FLOAT,!1,0,0));0<=t.color&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglColorBuffer),P.vertexAttribPointer(t.color,3,P.FLOAT,!1,0,0)),0<=t.normal&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglNormalBuffer),P.vertexAttribPointer(t.normal,3,P.FLOAT,!1,0,0)),0<=t.tangent&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglTangentBuffer),P.vertexAttribPointer(t.tangent,4,P.FLOAT,!1,0,0)),0<=t.uv&&(i.__webglUVBuffer?(P.bindBuffer(P.ARRAY_BUFFER,i.__webglUVBuffer),P.vertexAttribPointer(t.uv,2,P.FLOAT,!1,0,0),P.enableVertexAttribArray(t.uv)):P.disableVertexAttribArray(t.uv)),0<=t.uv2&&(i.__webglUV2Buffer?(P.bindBuffer(P.ARRAY_BUFFER,i.__webglUV2Buffer),P.vertexAttribPointer(t.uv2,2,P.FLOAT,!1,0,0),P.enableVertexAttribArray(t.uv2)):P.disableVertexAttribArray(t.uv2)),r.skinning&&0<=t.skinVertexA&&0<=t.skinVertexB&&0<=t.skinIndex&&0<=t.skinWeight&&(P.bindBuffer(P.ARRAY_BUFFER,i.__webglSkinVertexABuffer),P.vertexAttribPointer(t.skinVertexA,4,P.FLOAT,!1,0,0),P.bindBuffer(P.ARRAY_BUFFER,i.__webglSkinVertexBBuffer),P.vertexAttribPointer(t.skinVertexB,4,P.FLOAT,!1,0,0),P.bindBuffer(P.ARRAY_BUFFER,i.__webglSkinIndicesBuffer),P.vertexAttribPointer(t.skinIndex,4,P.FLOAT,!1,0,0),P.bindBuffer(P.ARRAY_BUFFER,i.__webglSkinWeightsBuffer),P.vertexAttribPointer(t.skinWeight,4,P.FLOAT,!1,0,0))}s instanceof THREE.Mesh?(r.wireframe?(r=r.wireframeLinewidth,r!==Q&&(P.lineWidth(r),Q=r),e&&P.bindBuffer(P.ELEMENT_ARRAY_BUFFER,i.__webglLineBuffer),P.drawElements(P.LINES,i.__webglLineCount,P.UNSIGNED_SHORT,0)):(e&&P.bindBuffer(P.ELEMENT_ARRAY_BUFFER,i.__webglFaceBuffer),P.drawElements(P.TRIANGLES,i.__webglFaceCount,P.UNSIGNED_SHORT,0)),D.info.render.calls++,D.info.render.vertices+=i.__webglFaceCount,D.info.render.faces+=i.__webglFaceCount/3):s instanceof THREE.Line?(s=s.type===THREE.LineStrip?P.LINE_STRIP:P.LINES,r=r.linewidth,r!==Q&&(P.lineWidth(r),Q=r),P.drawArrays(s,0,i.__webglLineCount),D.info.render.calls++):s instanceof THREE.ParticleSystem?(P.drawArrays(P.POINTS,0,i.__webglParticleCount),D.info.render.calls++,D.info.render.points+=i.__webglParticleCount):s instanceof THREE.Ribbon&&(P.drawArrays(P.TRIANGLE_STRIP,0,i.__webglVertexCount),D.info.render.calls++)}},this.render=function(e,t,n,r){var i,s,l,c,h=e.__lights,p=e.fog;F=-1,this.autoUpdateObjects&&this.initWebGLObjects(e),void 0===t.parent&&(console.warn("DEPRECATED: Camera hasn't been added to a Scene. Adding it..."),e.add(t)),this.autoUpdateScene&&e.updateMatrixWorld(),u(this.renderPluginsPre,e,t),D.info.render.calls=0,D.info.render.vertices=0,D.info.render.faces=0,D.info.render.points=0,t.matrixWorldInverse.getInverse(t.matrixWorld),t._viewMatrixArray||(t._viewMatrixArray=new Float32Array(16)),t.matrixWorldInverse.flattenToArray(t._viewMatrixArray),t._projectionMatrixArray||(t._projectionMatrixArray=new Float32Array(16)),t.projectionMatrix.flattenToArray(t._projectionMatrixArray),it.multiply(t.projectionMatrix,t.matrixWorldInverse),rt.setFromMatrix(it),this.setRenderTarget(n),(this.autoClear||r)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),c=e.__webglObjects;for(r=0,i=c.length;r<i;r++)if(s=c[r],l=s.object,s.render=!1,l.visible&&(!(l instanceof THREE.Mesh||l instanceof THREE.ParticleSystem)||!l.frustumCulled||rt.contains(l))){l.matrixWorld.flattenToArray(l._objectMatrixArray),m(l,t);var d=s,v=d.object,y=d.buffer,b=void 0,b=b=void 0,b=v.material;if(b instanceof THREE.MeshFaceMaterial){if(b=y.materialIndex,0<=b)b=v.geometry.materials[b],b.transparent?(d.transparent=b,d.opaque=null):(d.opaque=b,d.transparent=null)}else b&&(b.transparent?(d.transparent=b,d.opaque=null):(d.opaque=b,d.transparent=null));s.render=!0,this.sortObjects&&(l.renderDepth?s.z=l.renderDepth:(st.copy(l.position),it.multiplyVector3(st),s.z=st.z))}this.sortObjects&&c.sort(o),c=e.__webglObjectsImmediate;for(r=0,i=c.length;r<i;r++)if(s=c[r],l=s.object,l.visible)l.matrixAutoUpdate&&l.matrixWorld.flattenToArray(l._objectMatrixArray),m(l,t),l=s.object.material,l.transparent?(s.transparent=l,s.opaque=null):(s.opaque=l,s.transparent=null);e.overrideMaterial?(this.setBlending(e.overrideMaterial.blending),this.setDepthTest(e.overrideMaterial.depthTest),this.setDepthWrite(e.overrideMaterial.depthWrite),g(e.overrideMaterial.polygonOffset,e.overrideMaterial.polygonOffsetFactor,e.overrideMaterial.polygonOffsetUnits),a(e.__webglObjects,!1,"",t,h,p,!0,e.overrideMaterial),f(e.__webglObjectsImmediate,"",t,h,p,!1,e.overrideMaterial)):(this.setBlending(THREE.NormalBlending),a(e.__webglObjects,!0,"opaque",t,h,p,!1),f(e.__webglObjectsImmediate,"opaque",t,h,p,!1),a(e.__webglObjects,!1,"transparent",t,h,p,!0),f(e.__webglObjectsImmediate,"transparent",t,h,p,!0)),u(this.renderPluginsPost,e,t),n&&n.generateMipmaps&&n.minFilter!==THREE.NearestFilter&&n.minFilter!==THREE.LinearFilter&&(n instanceof THREE.WebGLRenderTargetCube?(P.bindTexture(P.TEXTURE_CUBE_MAP,n.__webglTexture),P.generateMipmap(P.TEXTURE_CUBE_MAP),P.bindTexture(P.TEXTURE_CUBE_MAP,null)):(P.bindTexture(P.TEXTURE_2D,n.__webglTexture),P.generateMipmap(P.TEXTURE_2D),P.bindTexture(P.TEXTURE_2D,null))),this.setDepthTest(!0),this.setDepthWrite(!0)},this.renderImmediateObject=function(e,t,n,r,i){var s=v(e,t,n,r,i);I=-1,D.setObjectFaces(i),i.immediateRenderCallback?i.immediateRenderCallback(s,P,rt):i.render(function(e){D.renderBufferImmediate(e,s,r.shading)})},this.initWebGLObjects=function(e){e.__webglObjects||(e.__webglObjects=[],e.__webglObjectsImmediate=[],e.__webglSprites=[],e.__webglFlares=[]);for(;e.__objectsAdded.length;){var o=e.__objectsAdded[0],u=e,a=void 0,f=void 0,v=void 0;if(!o.__webglInit)if(o.__webglInit=!0,o._modelViewMatrix=new THREE.Matrix4,o._normalMatrixArray=new Float32Array(9),o._modelViewMatrixArray=new Float32Array(16),o._objectMatrixArray=new Float32Array(16),o.matrixWorld.flattenToArray(o._objectMatrixArray),o instanceof THREE.Mesh){if(f=o.geometry,f instanceof THREE.Geometry){if(void 0===f.geometryGroups){var m=f,g=void 0,y=void 0,b=void 0,w=void 0,E=void 0,S=void 0,x=void 0,T={},N=m.morphTargets.length,C=m.morphNormals.length;m.geometryGroups={};for(g=0,y=m.faces.length;g<y;g++)b=m.faces[g],w=b.materialIndex,S=void 0!==w?w:-1,void 0===T[S]&&(T[S]={hash:S,counter:0}),x=T[S].hash+"_"+T[S].counter,void 0===m.geometryGroups[x]&&(m.geometryGroups[x]={faces3:[],faces4:[],materialIndex:w,vertices:0,numMorphTargets:N,numMorphNormals:C}),E=b instanceof THREE.Face3?3:4,65535<m.geometryGroups[x].vertices+E&&(T[S].counter+=1,x=T[S].hash+"_"+T[S].counter,void 0===m.geometryGroups[x]&&(m.geometryGroups[x]={faces3:[],faces4:[],materialIndex:w,vertices:0,numMorphTargets:N,numMorphNormals:C})),b instanceof THREE.Face3?m.geometryGroups[x].faces3.push(g):m.geometryGroups[x].faces4.push(g),m.geometryGroups[x].vertices+=E;m.geometryGroupsList=[];var k=void 0;for(k in m.geometryGroups)m.geometryGroups[k].id=R++,m.geometryGroupsList.push(m.geometryGroups[k])}for(a in f.geometryGroups)if(v=f.geometryGroups[a],!v.__webglVertexBuffer){var L=v;L.__webglVertexBuffer=P.createBuffer(),L.__webglNormalBuffer=P.createBuffer(),L.__webglTangentBuffer=P.createBuffer(),L.__webglColorBuffer=P.createBuffer(),L.__webglUVBuffer=P.createBuffer(),L.__webglUV2Buffer=P.createBuffer(),L.__webglSkinVertexABuffer=P.createBuffer(),L.__webglSkinVertexBBuffer=P.createBuffer(),L.__webglSkinIndicesBuffer=P.createBuffer(),L.__webglSkinWeightsBuffer=P.createBuffer(),L.__webglFaceBuffer=P.createBuffer(),L.__webglLineBuffer=P.createBuffer();var A=void 0,O=void 0;if(L.numMorphTargets){L.__webglMorphTargetsBuffers=[];for(A=0,O=L.numMorphTargets;A<O;A++)L.__webglMorphTargetsBuffers.push(P.createBuffer())}if(L.numMorphNormals){L.__webglMorphNormalsBuffers=[];for(A=0,O=L.numMorphNormals;A<O;A++)L.__webglMorphNormalsBuffers.push(P.createBuffer())}D.info.memory.geometries++;var M=v,_=o,H=_.geometry,B=M.faces3,j=M.faces4,F=3*B.length+4*j.length,I=1*B.length+2*j.length,q=3*B.length+4*j.length,U=n(_,M),z=i(U),W=r(U),X=U.vertexColors?U.vertexColors:!1;M.__vertexArray=new Float32Array(3*F),W&&(M.__normalArray=new Float32Array(3*F)),H.hasTangents&&(M.__tangentArray=new Float32Array(4*F)),X&&(M.__colorArray=new Float32Array(3*F));if(z){if(0<H.faceUvs.length||0<H.faceVertexUvs.length)M.__uvArray=new Float32Array(2*F);if(1<H.faceUvs.length||1<H.faceVertexUvs.length)M.__uv2Array=new Float32Array(2*F)}_.geometry.skinWeights.length&&_.geometry.skinIndices.length&&(M.__skinVertexAArray=new Float32Array(4*F),M.__skinVertexBArray=new Float32Array(4*F),M.__skinIndexArray=new Float32Array(4*F),M.__skinWeightArray=new Float32Array(4*F)),M.__faceArray=new Uint16Array(3*I),M.__lineArray=new Uint16Array(2*q);var V=void 0,$=void 0;if(M.numMorphTargets){M.__morphTargetsArrays=[];for(V=0,$=M.numMorphTargets;V<$;V++)M.__morphTargetsArrays.push(new Float32Array(3*F))}if(M.numMorphNormals){M.__morphNormalsArrays=[];for(V=0,$=M.numMorphNormals;V<$;V++)M.__morphNormalsArrays.push(new Float32Array(3*F))}M.__webglFaceCount=3*I,M.__webglLineCount=2*q;if(U.attributes){void 0===M.__webglCustomAttributesList&&(M.__webglCustomAttributesList=[]);var J=void 0;for(J in U.attributes){var K=U.attributes[J],Q={},G;for(G in K)Q[G]=K[G];if(!Q.__webglInitialized||Q.createUniqueBuffers){Q.__webglInitialized=!0;var Y=1;"v2"===Q.type?Y=2:"v3"===Q.type?Y=3:"v4"===Q.type?Y=4:"c"===Q.type&&(Y=3),Q.size=Y,Q.array=new Float32Array(F*Y),Q.buffer=P.createBuffer(),Q.buffer.belongsToAttribute=J,K.needsUpdate=!0,Q.__original=K}M.__webglCustomAttributesList.push(Q)}}M.__inittedArrays=!0,f.__dirtyVertices=!0,f.__dirtyMorphTargets=!0,f.__dirtyElements=!0,f.__dirtyUvs=!0,f.__dirtyNormals=!0,f.__dirtyTangents=!0,f.__dirtyColors=!0}}}else if(o instanceof THREE.Ribbon){if(f=o.geometry,!f.__webglVertexBuffer){var Z=f;Z.__webglVertexBuffer=P.createBuffer(),Z.__webglColorBuffer=P.createBuffer(),D.info.memory.geometries++;var et=f,tt=et.vertices.length;et.__vertexArray=new Float32Array(3*tt),et.__colorArray=new Float32Array(3*tt),et.__webglVertexCount=tt,f.__dirtyVertices=!0,f.__dirtyColors=!0}}else if(o instanceof THREE.Line){if(f=o.geometry,!f.__webglVertexBuffer){var nt=f;nt.__webglVertexBuffer=P.createBuffer(),nt.__webglColorBuffer=P.createBuffer(),D.info.memory.geometries++;var rt=f,it=o,st=rt.vertices.length;rt.__vertexArray=new Float32Array(3*st),rt.__colorArray=new Float32Array(3*st),rt.__webglLineCount=st,t(rt,it),f.__dirtyVertices=!0,f.__dirtyColors=!0}}else if(o instanceof THREE.ParticleSystem&&(f=o.geometry,!f.__webglVertexBuffer)){var ot=f;ot.__webglVertexBuffer=P.createBuffer(),ot.__webglColorBuffer=P.createBuffer(),D.info.geometries++;var ut=f,at=o,ft=ut.vertices.length;ut.__vertexArray=new Float32Array(3*ft),ut.__colorArray=new Float32Array(3*ft),ut.__sortArray=[],ut.__webglParticleCount=ft,t(ut,at),f.__dirtyVertices=!0,f.__dirtyColors=!0}if(!o.__webglActive){if(o instanceof THREE.Mesh)if(f=o.geometry,f instanceof THREE.BufferGeometry)l(u.__webglObjects,f,o);else for(a in f.geometryGroups)v=f.geometryGroups[a],l(u.__webglObjects,v,o);else o instanceof THREE.Ribbon||o instanceof THREE.Line||o instanceof THREE.ParticleSystem?(f=o.geometry,l(u.__webglObjects,f,o)):void 0!==THREE.MarchingCubes&&o instanceof THREE.MarchingCubes||o.immediateRenderCallback?u.__webglObjectsImmediate.push({object:o,opaque:null,transparent:null}):o instanceof THREE.Sprite?u.__webglSprites.push(o):o instanceof THREE.LensFlare&&u.__webglFlares.push(o);o.__webglActive=!0}e.__objectsAdded.splice(0,1)}for(;e.__objectsRemoved.length;){var lt=e.__objectsRemoved[0],ct=e;lt instanceof THREE.Mesh||lt instanceof THREE.ParticleSystem||lt instanceof THREE.Ribbon||lt instanceof THREE.Line?p(ct.__webglObjects,lt):lt instanceof THREE.Sprite?d(ct.__webglSprites,lt):lt instanceof THREE.LensFlare?d(ct.__webglFlares,lt):(lt instanceof THREE.MarchingCubes||lt.immediateRenderCallback)&&p(ct.__webglObjectsImmediate,lt),lt.__webglActive=!1,e.__objectsRemoved.splice(0,1)}for(var ht=0,pt=e.__webglObjects.length;ht<pt;ht++){var dt=e.__webglObjects[ht].object,vt=dt.geometry,mt=void 0,gt=void 0,yt=void 0;if(dt instanceof THREE.Mesh)if(vt instanceof THREE.BufferGeometry)vt.__dirtyVertices=!1,vt.__dirtyElements=!1,vt.__dirtyUvs=!1,vt.__dirtyNormals=!1,vt.__dirtyColors=!1;else{for(var bt=0,wt=vt.geometryGroupsList.length;bt<wt;bt++)if(mt=vt.geometryGroupsList[bt],yt=n(dt,mt),gt=yt.attributes&&c(yt),vt.__dirtyVertices||vt.__dirtyMorphTargets||vt.__dirtyElements||vt.__dirtyUvs||vt.__dirtyNormals||vt.__dirtyColors||vt.__dirtyTangents||gt){var Et=mt,St=dt,xt=P.DYNAMIC_DRAW,Tt=!vt.dynamic,Nt=yt;if(Et.__inittedArrays){var Ct=r(Nt),kt=Nt.vertexColors?Nt.vertexColors:!1,Lt=i(Nt),At=Ct===THREE.SmoothShading,Ot=void 0,Mt=void 0,_t=void 0,Dt=void 0,Pt=void 0,Ht=void 0,Bt=void 0,jt=void 0,Ft=void 0,It=void 0,qt=void 0,Rt=void 0,Ut=void 0,zt=void 0,Wt=void 0,Xt=void 0,Vt=void 0,$t=void 0,Jt=void 0,Kt=void 0,Qt=void 0,Gt=void 0,Yt=void 0,Zt=void 0,en=void 0,tn=void 0,nn=void 0,rn=void 0,sn=void 0,on=void 0,un=void 0,an=void 0,fn=void 0,ln=void 0,cn=void 0,hn=void 0,pn=void 0,dn=void 0,vn=void 0,mn=void 0,gn=void 0,yn=void 0,bn=void 0,wn=void 0,En=void 0,Sn=void 0,xn=void 0,Tn=void 0,Nn=void 0,Cn=void 0,kn=void 0,Ln=void 0,An=void 0,On=void 0,Mn=0,_n=0,Dn=0,Pn=0,Hn=0,Bn=0,jn=0,Fn=0,In=0,qn=0,Rn=0,Un=0,zn=void 0,Wn=Et.__vertexArray,Xn=Et.__uvArray,Vn=Et.__uv2Array,$n=Et.__normalArray,Jn=Et.__tangentArray,Kn=Et.__colorArray,Qn=Et.__skinVertexAArray,Gn=Et.__skinVertexBArray,Yn=Et.__skinIndexArray,Zn=Et.__skinWeightArray,er=Et.__morphTargetsArrays,tr=Et.__morphNormalsArrays,nr=Et.__webglCustomAttributesList,rr=void 0,ir=Et.__faceArray,sr=Et.__lineArray,or=St.geometry,ur=or.__dirtyElements,ar=or.__dirtyUvs,fr=or.__dirtyNormals,lr=or.__dirtyTangents,cr=or.__dirtyColors,hr=or.__dirtyMorphTargets,pr=or.vertices,dr=Et.faces3,vr=Et.faces4,mr=or.faces,gr=or.faceVertexUvs[0],yr=or.faceVertexUvs[1],br=or.skinVerticesA,wr=or.skinVerticesB,Er=or.skinIndices,Sr=or.skinWeights,xr=or.morphTargets,Tr=or.morphNormals;if(or.__dirtyVertices){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Rt=pr[Dt.a].position,Ut=pr[Dt.b].position,zt=pr[Dt.c].position,Wn[_n]=Rt.x,Wn[_n+1]=Rt.y,Wn[_n+2]=Rt.z,Wn[_n+3]=Ut.x,Wn[_n+4]=Ut.y,Wn[_n+5]=Ut.z,Wn[_n+6]=zt.x,Wn[_n+7]=zt.y,Wn[_n+8]=zt.z,_n+=9;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Rt=pr[Dt.a].position,Ut=pr[Dt.b].position,zt=pr[Dt.c].position,Wt=pr[Dt.d].position,Wn[_n]=Rt.x,Wn[_n+1]=Rt.y,Wn[_n+2]=Rt.z,Wn[_n+3]=Ut.x,Wn[_n+4]=Ut.y,Wn[_n+5]=Ut.z,Wn[_n+6]=zt.x,Wn[_n+7]=zt.y,Wn[_n+8]=zt.z,Wn[_n+9]=Wt.x,Wn[_n+10]=Wt.y,Wn[_n+11]=Wt.z,_n+=12;P.bindBuffer(P.ARRAY_BUFFER,Et.__webglVertexBuffer),P.bufferData(P.ARRAY_BUFFER,Wn,xt)}if(hr)for(Nn=0,Cn=xr.length;Nn<Cn;Nn++){Rn=0;for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)An=dr[Ot],Dt=mr[An],Rt=xr[Nn].vertices[Dt.a].position,Ut=xr[Nn].vertices[Dt.b].position,zt=xr[Nn].vertices[Dt.c].position,kn=er[Nn],kn[Rn]=Rt.x,kn[Rn+1]=Rt.y,kn[Rn+2]=Rt.z,kn[Rn+3]=Ut.x,kn[Rn+4]=Ut.y,kn[Rn+5]=Ut.z,kn[Rn+6]=zt.x,kn[Rn+7]=zt.y,kn[Rn+8]=zt.z,Nt.morphNormals&&(At?(On=Tr[Nn].vertexNormals[An],Kt=On.a,Qt=On.b,Gt=On.c):Gt=Qt=Kt=Tr[Nn].faceNormals[An],Ln=tr[Nn],Ln[Rn]=Kt.x,Ln[Rn+1]=Kt.y,Ln[Rn+2]=Kt.z,Ln[Rn+3]=Qt.x,Ln[Rn+4]=Qt.y,Ln[Rn+5]=Qt.z,Ln[Rn+6]=Gt.x,Ln[Rn+7]=Gt.y,Ln[Rn+8]=Gt.z),Rn+=9;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)An=vr[Ot],Dt=mr[An],Rt=xr[Nn].vertices[Dt.a].position,Ut=xr[Nn].vertices[Dt.b].position,zt=xr[Nn].vertices[Dt.c].position,Wt=xr[Nn].vertices[Dt.d].position,kn=er[Nn],kn[Rn]=Rt.x,kn[Rn+1]=Rt.y,kn[Rn+2]=Rt.z,kn[Rn+3]=Ut.x,kn[Rn+4]=Ut.y,kn[Rn+5]=Ut.z,kn[Rn+6]=zt.x,kn[Rn+7]=zt.y,kn[Rn+8]=zt.z,kn[Rn+9]=Wt.x,kn[Rn+10]=Wt.y,kn[Rn+11]=Wt.z,Nt.morphNormals&&(At?(On=Tr[Nn].vertexNormals[An],Kt=On.a,Qt=On.b,Gt=On.c,Yt=On.d):Yt=Gt=Qt=Kt=Tr[Nn].faceNormals[An],Ln=tr[Nn],Ln[Rn]=Kt.x,Ln[Rn+1]=Kt.y,Ln[Rn+2]=Kt.z,Ln[Rn+3]=Qt.x,Ln[Rn+4]=Qt.y,Ln[Rn+5]=Qt.z,Ln[Rn+6]=Gt.x,Ln[Rn+7]=Gt.y,Ln[Rn+8]=Gt.z,Ln[Rn+9]=Yt.x,Ln[Rn+10]=Yt.y,Ln[Rn+11]=Yt.z),Rn+=12;P.bindBuffer(P.ARRAY_BUFFER,Et.__webglMorphTargetsBuffers[Nn]),P.bufferData(P.ARRAY_BUFFER,er[Nn],xt),Nt.morphNormals&&(P.bindBuffer(P.ARRAY_BUFFER,Et.__webglMorphNormalsBuffers[Nn]),P.bufferData(P.ARRAY_BUFFER,tr[Nn],xt))}if(Sr.length){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],rn=Sr[Dt.a],sn=Sr[Dt.b],on=Sr[Dt.c],Zn[qn]=rn.x,Zn[qn+1]=rn.y,Zn[qn+2]=rn.z,Zn[qn+3]=rn.w,Zn[qn+4]=sn.x,Zn[qn+5]=sn.y,Zn[qn+6]=sn.z,Zn[qn+7]=sn.w,Zn[qn+8]=on.x,Zn[qn+9]=on.y,Zn[qn+10]=on.z,Zn[qn+11]=on.w,an=Er[Dt.a],fn=Er[Dt.b],ln=Er[Dt.c],Yn[qn]=an.x,Yn[qn+1]=an.y,Yn[qn+2]=an.z,Yn[qn+3]=an.w,Yn[qn+4]=fn.x,Yn[qn+5]=fn.y,Yn[qn+6]=fn.z,Yn[qn+7]=fn.w,Yn[qn+8]=ln.x,Yn[qn+9]=ln.y,Yn[qn+10]=ln.z,Yn[qn+11]=ln.w,hn=br[Dt.a],pn=br[Dt.b],dn=br[Dt.c],Qn[qn]=hn.x,Qn[qn+1]=hn.y,Qn[qn+2]=hn.z,Qn[qn+3]=1,Qn[qn+4]=pn.x,Qn[qn+5]=pn.y,Qn[qn+6]=pn.z,Qn[qn+7]=1,Qn[qn+8]=dn.x,Qn[qn+9]=dn.y,Qn[qn+10]=dn.z,Qn[qn+11]=1,mn=wr[Dt.a],gn=wr[Dt.b],yn=wr[Dt.c],Gn[qn]=mn.x,Gn[qn+1]=mn.y,Gn[qn+2]=mn.z,Gn[qn+3]=1,Gn[qn+4]=gn.x,Gn[qn+5]=gn.y,Gn[qn+6]=gn.z,Gn[qn+7]=1,Gn[qn+8]=yn.x,Gn[qn+9]=yn.y,Gn[qn+10]=yn.z,Gn[qn+11]=1,qn+=12;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],rn=Sr[Dt.a],sn=Sr[Dt.b],on=Sr[Dt.c],un=Sr[Dt.d],Zn[qn]=rn.x,Zn[qn+1]=rn.y,Zn[qn+2]=rn.z,Zn[qn+3]=rn.w,Zn[qn+4]=sn.x,Zn[qn+5]=sn.y,Zn[qn+6]=sn.z,Zn[qn+7]=sn.w,Zn[qn+8]=on.x,Zn[qn+9]=on.y,Zn[qn+10]=on.z,Zn[qn+11]=on.w,Zn[qn+12]=un.x,Zn[qn+13]=un.y,Zn[qn+14]=un.z,Zn[qn+15]=un.w,an=Er[Dt.a],fn=Er[Dt.b],ln=Er[Dt.c],cn=Er[Dt.d],Yn[qn]=an.x,Yn[qn+1]=an.y,Yn[qn+2]=an.z,Yn[qn+3]=an.w,Yn[qn+4]=fn.x,Yn[qn+5]=fn.y,Yn[qn+6]=fn.z,Yn[qn+7]=fn.w,Yn[qn+8]=ln.x,Yn[qn+9]=ln.y,Yn[qn+10]=ln.z,Yn[qn+11]=ln.w,Yn[qn+12]=cn.x,Yn[qn+13]=cn.y,Yn[qn+14]=cn.z,Yn[qn+15]=cn.w,hn=br[Dt.a],pn=br[Dt.b],dn=br[Dt.c],vn=br[Dt.d],Qn[qn]=hn.x,Qn[qn+1]=hn.y,Qn[qn+2]=hn.z,Qn[qn+3]=1,Qn[qn+4]=pn.x,Qn[qn+5]=pn.y,Qn[qn+6]=pn.z,Qn[qn+7]=1,Qn[qn+8]=dn.x,Qn[qn+9]=dn.y,Qn[qn+10]=dn.z,Qn[qn+11]=1,Qn[qn+12]=vn.x,Qn[qn+13]=vn.y,Qn[qn+14]=vn.z,Qn[qn+15]=1,mn=wr[Dt.a],gn=wr[Dt.b],yn=wr[Dt.c],bn=wr[Dt.d],Gn[qn]=mn.x,Gn[qn+1]=mn.y,Gn[qn+2]=mn.z,Gn[qn+3]=1,Gn[qn+4]=gn.x,Gn[qn+5]=gn.y,Gn[qn+6]=gn.z,Gn[qn+7]=1,Gn[qn+8]=yn.x,Gn[qn+9]=yn.y,Gn[qn+10]=yn.z,Gn[qn+11]=1,Gn[qn+12]=bn.x,Gn[qn+13]=bn.y,Gn[qn+14]=bn.z,Gn[qn+15]=1,qn+=16;0<qn&&(P.bindBuffer(P.ARRAY_BUFFER,Et.__webglSkinVertexABuffer),P.bufferData(P.ARRAY_BUFFER,Qn,xt),P.bindBuffer(P.ARRAY_BUFFER,Et.__webglSkinVertexBBuffer),P.bufferData(P.ARRAY_BUFFER,Gn,xt),P.bindBuffer(P.ARRAY_BUFFER,Et.__webglSkinIndicesBuffer),P.bufferData(P.ARRAY_BUFFER,Yn,xt),P.bindBuffer(P.ARRAY_BUFFER,Et.__webglSkinWeightsBuffer),P.bufferData(P.ARRAY_BUFFER,Zn,xt))}if(cr&&kt){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Bt=Dt.vertexColors,jt=Dt.color,3===Bt.length&&kt===THREE.VertexColors?(Zt=Bt[0],en=Bt[1],tn=Bt[2]):tn=en=Zt=jt,Kn[In]=Zt.r,Kn[In+1]=Zt.g,Kn[In+2]=Zt.b,Kn[In+3]=en.r,Kn[In+4]=en.g,Kn[In+5]=en.b,Kn[In+6]=tn.r,Kn[In+7]=tn.g,Kn[In+8]=tn.b,In+=9;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Bt=Dt.vertexColors,jt=Dt.color,4===Bt.length&&kt===THREE.VertexColors?(Zt=Bt[0],en=Bt[1],tn=Bt[2],nn=Bt[3]):nn=tn=en=Zt=jt,Kn[In]=Zt.r,Kn[In+1]=Zt.g,Kn[In+2]=Zt.b,Kn[In+3]=en.r,Kn[In+4]=en.g,Kn[In+5]=en.b,Kn[In+6]=tn.r,Kn[In+7]=tn.g,Kn[In+8]=tn.b,Kn[In+9]=nn.r,Kn[In+10]=nn.g,Kn[In+11]=nn.b,In+=12;0<In&&(P.bindBuffer(P.ARRAY_BUFFER,Et.__webglColorBuffer),P.bufferData(P.ARRAY_BUFFER,Kn,xt))}if(lr&&or.hasTangents){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Ft=Dt.vertexTangents,Xt=Ft[0],Vt=Ft[1],$t=Ft[2],Jn[jn]=Xt.x,Jn[jn+1]=Xt.y,Jn[jn+2]=Xt.z,Jn[jn+3]=Xt.w,Jn[jn+4]=Vt.x,Jn[jn+5]=Vt.y,Jn[jn+6]=Vt.z,Jn[jn+7]=Vt.w,Jn[jn+8]=$t.x,Jn[jn+9]=$t.y,Jn[jn+10]=$t.z,Jn[jn+11]=$t.w,jn+=12;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Ft=Dt.vertexTangents,Xt=Ft[0],Vt=Ft[1],$t=Ft[2],Jt=Ft[3],Jn[jn]=Xt.x,Jn[jn+1]=Xt.y,Jn[jn+2]=Xt.z,Jn[jn+3]=Xt.w,Jn[jn+4]=Vt.x,Jn[jn+5]=Vt.y,Jn[jn+6]=Vt.z,Jn[jn+7]=Vt.w,Jn[jn+8]=$t.x,Jn[jn+9]=$t.y,Jn[jn+10]=$t.z,Jn[jn+11]=$t.w,Jn[jn+12]=Jt.x,Jn[jn+13]=Jt.y,Jn[jn+14]=Jt.z,Jn[jn+15]=Jt.w,jn+=16;P.bindBuffer(P.ARRAY_BUFFER,Et.__webglTangentBuffer),P.bufferData(P.ARRAY_BUFFER,Jn,xt)}if(fr&&Ct){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)if(Dt=mr[dr[Ot]],Pt=Dt.vertexNormals,Ht=Dt.normal,3===Pt.length&&At)for(wn=0;3>wn;wn++)Sn=Pt[wn],$n[Bn]=Sn.x,$n[Bn+1]=Sn.y,$n[Bn+2]=Sn.z,Bn+=3;else for(wn=0;3>wn;wn++)$n[Bn]=Ht.x,$n[Bn+1]=Ht.y,$n[Bn+2]=Ht.z,Bn+=3;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)if(Dt=mr[vr[Ot]],Pt=Dt.vertexNormals,Ht=Dt.normal,4===Pt.length&&At)for(wn=0;4>wn;wn++)Sn=Pt[wn],$n[Bn]=Sn.x,$n[Bn+1]=Sn.y,$n[Bn+2]=Sn.z,Bn+=3;else for(wn=0;4>wn;wn++)$n[Bn]=Ht.x,$n[Bn+1]=Ht.y,$n[Bn+2]=Ht.z,Bn+=3;P.bindBuffer(P.ARRAY_BUFFER,Et.__webglNormalBuffer),P.bufferData(P.ARRAY_BUFFER,$n,xt)}if(ar&&gr&&Lt){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)if(_t=dr[Ot],Dt=mr[_t],It=gr[_t],void 0!==It)for(wn=0;3>wn;wn++)xn=It[wn],Xn[Dn]=xn.u,Xn[Dn+1]=xn.v,Dn+=2;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)if(_t=vr[Ot],Dt=mr[_t],It=gr[_t],void 0!==It)for(wn=0;4>wn;wn++)xn=It[wn],Xn[Dn]=xn.u,Xn[Dn+1]=xn.v,Dn+=2;0<Dn&&(P.bindBuffer(P.ARRAY_BUFFER,Et.__webglUVBuffer),P.bufferData(P.ARRAY_BUFFER,Xn,xt))}if(ar&&yr&&Lt){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)if(_t=dr[Ot],Dt=mr[_t],qt=yr[_t],void 0!==qt)for(wn=0;3>wn;wn++)Tn=qt[wn],Vn[Pn]=Tn.u,Vn[Pn+1]=Tn.v,Pn+=2;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)if(_t=vr[Ot],Dt=mr[_t],qt=yr[_t],void 0!==qt)for(wn=0;4>wn;wn++)Tn=qt[wn],Vn[Pn]=Tn.u,Vn[Pn+1]=Tn.v,Pn+=2;0<Pn&&(P.bindBuffer(P.ARRAY_BUFFER,Et.__webglUV2Buffer),P.bufferData(P.ARRAY_BUFFER,Vn,xt))}if(ur){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],ir[Hn]=Mn,ir[Hn+1]=Mn+1,ir[Hn+2]=Mn+2,Hn+=3,sr[Fn]=Mn,sr[Fn+1]=Mn+1,sr[Fn+2]=Mn,sr[Fn+3]=Mn+2,sr[Fn+4]=Mn+1,sr[Fn+5]=Mn+2,Fn+=6,Mn+=3;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],ir[Hn]=Mn,ir[Hn+1]=Mn+1,ir[Hn+2]=Mn+3,ir[Hn+3]=Mn+1,ir[Hn+4]=Mn+2,ir[Hn+5]=Mn+3,Hn+=6,sr[Fn]=Mn,sr[Fn+1]=Mn+1,sr[Fn+2]=Mn,sr[Fn+3]=Mn+3,sr[Fn+4]=Mn+1,sr[Fn+5]=Mn+2,sr[Fn+6]=Mn+2,sr[Fn+7]=Mn+3,Fn+=8,Mn+=4;P.bindBuffer(P.ELEMENT_ARRAY_BUFFER,Et.__webglFaceBuffer),P.bufferData(P.ELEMENT_ARRAY_BUFFER,ir,xt),P.bindBuffer(P.ELEMENT_ARRAY_BUFFER,Et.__webglLineBuffer),P.bufferData(P.ELEMENT_ARRAY_BUFFER,sr,xt)}if(nr)for(wn=0,En=nr.length;wn<En;wn++)if(rr=nr[wn],rr.__original.needsUpdate){Un=0;if(1===rr.size){if(void 0===rr.boundTo||"vertices"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],rr.array[Un]=rr.value[Dt.a],rr.array[Un+1]=rr.value[Dt.b],rr.array[Un+2]=rr.value[Dt.c],Un+=3;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],rr.array[Un]=rr.value[Dt.a],rr.array[Un+1]=rr.value[Dt.b],rr.array[Un+2]=rr.value[Dt.c],rr.array[Un+3]=rr.value[Dt.d],Un+=4}else if("faces"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)zn=rr.value[dr[Ot]],rr.array[Un]=zn,rr.array[Un+1]=zn,rr.array[Un+2]=zn,Un+=3;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)zn=rr.value[vr[Ot]],rr.array[Un]=zn,rr.array[Un+1]=zn,rr.array[Un+2]=zn,rr.array[Un+3]=zn,Un+=4}}else if(2===rr.size){if(void 0===rr.boundTo||"vertices"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Ut.x,rr.array[Un+3]=Ut.y,rr.array[Un+4]=zt.x,rr.array[Un+5]=zt.y,Un+=6;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],Wt=rr.value[Dt.d],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Ut.x,rr.array[Un+3]=Ut.y,rr.array[Un+4]=zt.x,rr.array[Un+5]=zt.y,rr.array[Un+6]=Wt.x,rr.array[Un+7]=Wt.y,Un+=8}else if("faces"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)zt=Ut=Rt=zn=rr.value[dr[Ot]],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Ut.x,rr.array[Un+3]=Ut.y,rr.array[Un+4]=zt.x,rr.array[Un+5]=zt.y,Un+=6;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Wt=zt=Ut=Rt=zn=rr.value[vr[Ot]],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Ut.x,rr.array[Un+3]=Ut.y,rr.array[Un+4]=zt.x,rr.array[Un+5]=zt.y,rr.array[Un+6]=Wt.x,rr.array[Un+7]=Wt.y,Un+=8}}else if(3===rr.size){var Nr;Nr="c"===rr.type?["r","g","b"]:["x","y","z"];if(void 0===rr.boundTo||"vertices"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],rr.array[Un]=Rt[Nr[0]],rr.array[Un+1]=Rt[Nr[1]],rr.array[Un+2]=Rt[Nr[2]],rr.array[Un+3]=Ut[Nr[0]],rr.array[Un+4]=Ut[Nr[1]],rr.array[Un+5]=Ut[Nr[2]],rr.array[Un+6]=zt[Nr[0]],rr.array[Un+7]=zt[Nr[1]],rr.array[Un+8]=zt[Nr[2]],Un+=9;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],Wt=rr.value[Dt.d],rr.array[Un]=Rt[Nr[0]],rr.array[Un+1]=Rt[Nr[1]],rr.array[Un+2]=Rt[Nr[2]],rr.array[Un+3]=Ut[Nr[0]],rr.array[Un+4]=Ut[Nr[1]],rr.array[Un+5]=Ut[Nr[2]],rr.array[Un+6]=zt[Nr[0]],rr.array[Un+7]=zt[Nr[1]],rr.array[Un+8]=zt[Nr[2]],rr.array[Un+9]=Wt[Nr[0]],rr.array[Un+10]=Wt[Nr[1]],rr.array[Un+11]=Wt[Nr[2]],Un+=12}else if("faces"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)zt=Ut=Rt=zn=rr.value[dr[Ot]],rr.array[Un]=Rt[Nr[0]],rr.array[Un+1]=Rt[Nr[1]],rr.array[Un+2]=Rt[Nr[2]],rr.array[Un+3]=Ut[Nr[0]],rr.array[Un+4]=Ut[Nr[1]],rr.array[Un+5]=Ut[Nr[2]],rr.array[Un+6]=zt[Nr[0]],rr.array[Un+7]=zt[Nr[1]],rr.array[Un+8]=zt[Nr[2]],Un+=9;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Wt=zt=Ut=Rt=zn=rr.value[vr[Ot]],rr.array[Un]=Rt[Nr[0]],rr.array[Un+1]=Rt[Nr[1]],rr.array[Un+2]=Rt[Nr[2]],rr.array[Un+3]=Ut[Nr[0]],rr.array[Un+4]=Ut[Nr[1]],rr.array[Un+5]=Ut[Nr[2]],rr.array[Un+6]=zt[Nr[0]],rr.array[Un+7]=zt[Nr[1]],rr.array[Un+8]=zt[Nr[2]],rr.array[Un+9]=Wt[Nr[0]],rr.array[Un+10]=Wt[Nr[1]],rr.array[Un+11]=Wt[Nr[2]],Un+=12}}else if(4===rr.size)if(void 0===rr.boundTo||"vertices"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)Dt=mr[dr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Rt.z,rr.array[Un+3]=Rt.w,rr.array[Un+4]=Ut.x,rr.array[Un+5]=Ut.y,rr.array[Un+6]=Ut.z,rr.array[Un+7]=Ut.w,rr.array[Un+8]=zt.x,rr.array[Un+9]=zt.y,rr.array[Un+10]=zt.z,rr.array[Un+11]=zt.w,Un+=12;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Dt=mr[vr[Ot]],Rt=rr.value[Dt.a],Ut=rr.value[Dt.b],zt=rr.value[Dt.c],Wt=rr.value[Dt.d],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Rt.z,rr.array[Un+3]=Rt.w,rr.array[Un+4]=Ut.x,rr.array[Un+5]=Ut.y,rr.array[Un+6]=Ut.z,rr.array[Un+7]=Ut.w,rr.array[Un+8]=zt.x,rr.array[Un+9]=zt.y,rr.array[Un+10]=zt.z,rr.array[Un+11]=zt.w,rr.array[Un+12]=Wt.x,rr.array[Un+13]=Wt.y,rr.array[Un+14]=Wt.z,rr.array[Un+15]=Wt.w,Un+=16}else if("faces"===rr.boundTo){for(Ot=0,Mt=dr.length;Ot<Mt;Ot++)zt=Ut=Rt=zn=rr.value[dr[Ot]],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Rt.z,rr.array[Un+3]=Rt.w,rr.array[Un+4]=Ut.x,rr.array[Un+5]=Ut.y,rr.array[Un+6]=Ut.z,rr.array[Un+7]=Ut.w,rr.array[Un+8]=zt.x,rr.array[Un+9]=zt.y,rr.array[Un+10]=zt.z,rr.array[Un+11]=zt.w,Un+=12;for(Ot=0,Mt=vr.length;Ot<Mt;Ot++)Wt=zt=Ut=Rt=zn=rr.value[vr[Ot]],rr.array[Un]=Rt.x,rr.array[Un+1]=Rt.y,rr.array[Un+2]=Rt.z,rr.array[Un+3]=Rt.w,rr.array[Un+4]=Ut.x,rr.array[Un+5]=Ut.y,rr.array[Un+6]=Ut.z,rr.array[Un+7]=Ut.w,rr.array[Un+8]=zt.x,rr.array[Un+9]=zt.y,rr.array[Un+10]=zt.z,rr.array[Un+11]=zt.w,rr.array[Un+12]=Wt.x,rr.array[Un+13]=Wt.y,rr.array[Un+14]=Wt.z,rr.array[Un+15]=Wt.w,Un+=16}P.bindBuffer(P.ARRAY_BUFFER,rr.buffer),P.bufferData(P.ARRAY_BUFFER,rr.array,xt)}Tt&&(delete Et.__inittedArrays,delete Et.__colorArray,delete Et.__normalArray,delete Et.__tangentArray,delete Et.__uvArray,delete Et.__uv2Array,delete Et.__faceArray,delete Et.__vertexArray,delete Et.__lineArray,delete Et.__skinVertexAArray,delete Et.__skinVertexBArray,delete Et.__skinIndexArray,delete Et.__skinWeightArray)}}vt.__dirtyVertices=!1,vt.__dirtyMorphTargets=!1,vt.__dirtyElements=!1,vt.__dirtyUvs=!1,vt.__dirtyNormals=!1,vt.__dirtyColors=!1,vt.__dirtyTangents=!1,yt.attributes&&h(yt)}else if(dt instanceof THREE.Ribbon){if(vt.__dirtyVertices||vt.__dirtyColors){var Cr=vt,kr=P.DYNAMIC_DRAW,Lr=void 0,Ar=void 0,Or=void 0,Mr=void 0,_r=void 0,Dr=Cr.vertices,Pr=Cr.colors,Hr=Dr.length,Br=Pr.length,jr=Cr.__vertexArray,Fr=Cr.__colorArray,Ir=Cr.__dirtyColors;if(Cr.__dirtyVertices){for(Lr=0;Lr<Hr;Lr++)Or=Dr[Lr].position,Mr=3*Lr,jr[Mr]=Or.x,jr[Mr+1]=Or.y,jr[Mr+2]=Or.z;P.bindBuffer(P.ARRAY_BUFFER,Cr.__webglVertexBuffer),P.bufferData(P.ARRAY_BUFFER,jr,kr)}if(Ir){for(Ar=0;Ar<Br;Ar++)_r=Pr[Ar],Mr=3*Ar,Fr[Mr]=_r.r,Fr[Mr+1]=_r.g,Fr[Mr+2]=_r.b;P.bindBuffer(P.ARRAY_BUFFER,Cr.__webglColorBuffer),P.bufferData(P.ARRAY_BUFFER,Fr,kr)}}vt.__dirtyVertices=!1,vt.__dirtyColors=!1}else if(dt instanceof THREE.Line){yt=n(dt,mt),gt=yt.attributes&&c(yt);if(vt.__dirtyVertices||vt.__dirtyColors||gt){var qr=vt,Rr=P.DYNAMIC_DRAW,Ur=void 0,zr=void 0,Wr=void 0,Xr=void 0,Vr=void 0,$r=qr.vertices,Jr=qr.colors,Kr=$r.length,Qr=Jr.length,Gr=qr.__vertexArray,Yr=qr.__colorArray,Zr=qr.__dirtyColors,ei=qr.__webglCustomAttributesList,ti=void 0,ni=void 0,ri=void 0,ii=void 0,si=void 0,oi=void 0;if(qr.__dirtyVertices){for(Ur=0;Ur<Kr;Ur++)Wr=$r[Ur].position,Xr=3*Ur,Gr[Xr]=Wr.x,Gr[Xr+1]=Wr.y,Gr[Xr+2]=Wr.z;P.bindBuffer(P.ARRAY_BUFFER,qr.__webglVertexBuffer),P.bufferData(P.ARRAY_BUFFER,Gr,Rr)}if(Zr){for(zr=0;zr<Qr;zr++)Vr=Jr[zr],Xr=3*zr,Yr[Xr]=Vr.r,Yr[Xr+1]=Vr.g,Yr[Xr+2]=Vr.b;P.bindBuffer(P.ARRAY_BUFFER,qr.__webglColorBuffer),P.bufferData(P.ARRAY_BUFFER,Yr,Rr)}if(ei)for(ti=0,ni=ei.length;ti<ni;ti++)if(oi=ei[ti],oi.needsUpdate&&(void 0===oi.boundTo||"vertices"===oi.boundTo)){Xr=0,ii=oi.value.length;if(1===oi.size)for(ri=0;ri<ii;ri++)oi.array[ri]=oi.value[ri];else if(2===oi.size)for(ri=0;ri<ii;ri++)si=oi.value[ri],oi.array[Xr]=si.x,oi.array[Xr+1]=si.y,Xr+=2;else if(3===oi.size)if("c"===oi.type)for(ri=0;ri<ii;ri++)si=oi.value[ri],oi.array[Xr]=si.r,oi.array[Xr+1]=si.g,oi.array[Xr+2]=si.b,Xr+=3;else for(ri=0;ri<ii;ri++)si=oi.value[ri],oi.array[Xr]=si.x,oi.array[Xr+1]=si.y,oi.array[Xr+2]=si.z,Xr+=3;else if(4===oi.size)for(ri=0;ri<ii;ri++)si=oi.value[ri],oi.array[Xr]=si.x,oi.array[Xr+1]=si.y,oi.array[Xr+2]=si.z,oi.array[Xr+3]=si.w,Xr+=4;P.bindBuffer(P.ARRAY_BUFFER,oi.buffer),P.bufferData(P.ARRAY_BUFFER,oi.array,Rr)}}vt.__dirtyVertices=!1,vt.__dirtyColors=!1,yt.attributes&&h(yt)}else dt instanceof THREE.ParticleSystem&&(yt=n(dt,mt),gt=yt.attributes&&c(yt),(vt.__dirtyVertices||vt.__dirtyColors||dt.sortParticles||gt)&&s(vt,P.DYNAMIC_DRAW,dt),vt.__dirtyVertices=!1,vt.__dirtyColors=!1,yt.attributes&&h(yt))}},this.initMaterial=function(e,t,n,r){var i,s,o,u,a;e instanceof THREE.MeshDepthMaterial?a="depth":e instanceof THREE.MeshNormalMaterial?a="normal":e instanceof THREE.MeshBasicMaterial?a="basic":e instanceof THREE.MeshLambertMaterial?a="lambert":e instanceof THREE.MeshPhongMaterial?a="phong":e instanceof THREE.LineBasicMaterial?a="basic":e instanceof THREE.ParticleBasicMaterial&&(a="particle_basic");if(a){var f=THREE.ShaderLib[a];e.uniforms=THREE.UniformsUtils.clone(f.uniforms),e.vertexShader=f.vertexShader,e.fragmentShader=f.fragmentShader}var l,c;s=f=0;for(l=0,c=t.length;l<c;l++)i=t[l],i.onlyShadow||(i instanceof THREE.DirectionalLight&&s++,i instanceof THREE.PointLight&&f++,i instanceof THREE.SpotLight&&f++);f+s<=_?l=s:(l=Math.ceil(_*s/(f+s)),f=_-l),i=l,s=f;var h=0;for(f=0,l=t.length;f<l;f++)c=t[f],c.castShadow&&(c instanceof THREE.SpotLight&&h++,c instanceof THREE.DirectionalLight&&!c.shadowCascade&&h++);var p=50;void 0!==r&&r instanceof THREE.SkinnedMesh&&(p=r.bones.length);var d;e:{l=e.fragmentShader,c=e.vertexShader;var f=e.uniforms,t=e.attributes,n={map:!!e.map,envMap:!!e.envMap,lightMap:!!e.lightMap,vertexColors:e.vertexColors,fog:n,useFog:e.fog,sizeAttenuation:e.sizeAttenuation,skinning:e.skinning,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:i,maxPointLights:s,maxBones:p,shadowMapEnabled:this.shadowMapEnabled&&r.receiveShadow,shadowMapSoft:this.shadowMapSoft,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,maxShadows:h,alphaTest:e.alphaTest,metal:e.metal,perPixel:e.perPixel,wrapAround:e.wrapAround,doubleSided:r&&r.doubleSided},v,r=[];a?r.push(a):(r.push(l),r.push(c));for(v in n)r.push(v),r.push(n[v]);a=r.join();for(v=0,r=H.length;v<r;v++)if(H[v].code===a){d=H[v].program;break e}v=P.createProgram(),r=[0<at?"#define VERTEX_TEXTURES":"",D.gammaInput?"#define GAMMA_INPUT":"",D.gammaOutput?"#define GAMMA_OUTPUT":"",D.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+n.maxDirLights,"#define MAX_POINT_LIGHTS "+n.maxPointLights,"#define MAX_SHADOWS "+n.maxShadows,"#define MAX_BONES "+n.maxBones,n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.lightMap?"#define USE_LIGHTMAP":"",n.vertexColors?"#define USE_COLOR":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals?"#define USE_MORPHNORMALS":"",n.perPixel?"#define PHONG_PER_PIXEL":"",n.wrapAround?"#define WRAP_AROUND":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapSoft?"#define SHADOWMAP_SOFT":"",n.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",n.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n"),i=["precision "+T+" float;","#define MAX_DIR_LIGHTS "+n.maxDirLights,"#define MAX_POINT_LIGHTS "+n.maxPointLights,"#define MAX_SHADOWS "+n.maxShadows,n.alphaTest?"#define ALPHATEST "+n.alphaTest:"",D.gammaInput?"#define GAMMA_INPUT":"",D.gammaOutput?"#define GAMMA_OUTPUT":"",D.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fog instanceof THREE.FogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.lightMap?"#define USE_LIGHTMAP":"",n.vertexColors?"#define USE_COLOR":"",n.metal?"#define METAL":"",n.perPixel?"#define PHONG_PER_PIXEL":"",n.wrapAround?"#define WRAP_AROUND":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapSoft?"#define SHADOWMAP_SOFT":"",n.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",n.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n"),P.attachShader(v,y("fragment",i+l)),P.attachShader(v,y("vertex",r+c)),P.linkProgram(v),P.getProgramParameter(v,P.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+P.getProgramParameter(v,P.VALIDATE_STATUS)+", gl error ["+P.getError()+"]"),v.uniforms={},v.attributes={};var m,r="viewMatrix,modelViewMatrix,projectionMatrix,normalMatrix,objectMatrix,cameraPosition,boneGlobalMatrices,morphTargetInfluences".split(",");for(m in f)r.push(m);m=r;for(r=0,f=m.length;r<f;r++)l=m[r],v.uniforms[l]=P.getUniformLocation(v,l);r="position,normal,uv,uv2,tangent,color,skinVertexA,skinVertexB,skinIndex,skinWeight".split(",");for(m=0;m<n.maxMorphTargets;m++)r.push("morphTarget"+m);for(m=0;m<n.maxMorphNormals;m++)r.push("morphNormal"+m);for(d in t)r.push(d);d=r;for(m=0,t=d.length;m<t;m++)n=d[m],v.attributes[n]=P.getAttribLocation(v,n);v.id=H.length,H.push({program:v,code:a}),D.info.memory.programs=H.length,d=v}e.program=d,d=e.program.attributes,0<=d.position&&P.enableVertexAttribArray(d.position),0<=d.color&&P.enableVertexAttribArray(d.color),0<=d.normal&&P.enableVertexAttribArray(d.normal),0<=d.tangent&&P.enableVertexAttribArray(d.tangent),e.skinning&&0<=d.skinVertexA&&0<=d.skinVertexB&&0<=d.skinIndex&&0<=d.skinWeight&&(P.enableVertexAttribArray(d.skinVertexA),P.enableVertexAttribArray(d.skinVertexB),P.enableVertexAttribArray(d.skinIndex),P.enableVertexAttribArray(d.skinWeight));if(e.attributes)for(u in e.attributes)void 0!==d[u]&&0<=d[u]&&P.enableVertexAttribArray(d[u]);if(e.morphTargets){e.numSupportedMorphTargets=0,v="morphTarget";for(u=0;u<this.maxMorphTargets;u++)m=v+u,0<=d[m]&&(P.enableVertexAttribArray(d[m]),e.numSupportedMorphTargets++)}if(e.morphNormals){e.numSupportedMorphNormals=0,v="morphNormal";for(u=0;u<this.maxMorphNormals;u++)m=v+u,0<=d[m]&&(P.enableVertexAttribArray(d[m]),e.numSupportedMorphNormals++)}e.uniformsList=[];for(o in e.uniforms)e.uniformsList.push([e.uniforms[o],o])},this.setFaceCulling=function(e,t){e?(!t||"ccw"===t?P.frontFace(P.CCW):P.frontFace(P.CW),"back"===e?P.cullFace(P.BACK):"front"===e?P.cullFace(P.FRONT):P.cullFace(P.FRONT_AND_BACK),P.enable(P.CULL_FACE)):P.disable(P.CULL_FACE)},this.setObjectFaces=function(e){U!==e.doubleSided&&(e.doubleSided?P.disable(P.CULL_FACE):P.enable(P.CULL_FACE),U=e.doubleSided),z!==e.flipSided&&(e.flipSided?P.frontFace(P.CW):P.frontFace(P.CCW),z=e.flipSided)},this.setDepthTest=function(e){X!==e&&(e?P.enable(P.DEPTH_TEST):P.disable(P.DEPTH_TEST),X=e)},this.setDepthWrite=function(e){V!==e&&(P.depthMask(e),V=e)},this.setBlending=function(e){if(e!==W){switch(e){case THREE.NoBlending:P.disable(P.BLEND);break;case THREE.AdditiveBlending:P.enable(P.BLEND),P.blendEquation(P.FUNC_ADD),P.blendFunc(P.SRC_ALPHA,P.ONE);break;case THREE.SubtractiveBlending:P.enable(P.BLEND),P.blendEquation(P.FUNC_ADD),P.blendFunc(P.ZERO,P.ONE_MINUS_SRC_COLOR);break;case THREE.MultiplyBlending:P.enable(P.BLEND),P.blendEquation(P.FUNC_ADD),P.blendFunc(P.ZERO,P.SRC_COLOR);break;default:P.enable(P.BLEND),P.blendEquationSeparate(P.FUNC_ADD,P.FUNC_ADD),P.blendFuncSeparate(P.SRC_ALPHA,P.ONE_MINUS_SRC_ALPHA,P.ONE,P.ONE_MINUS_SRC_ALPHA)}W=e}},this.setTexture=function(e,t){if(e.needsUpdate){e.__webglInit||(e.__webglInit=!0,e.__webglTexture=P.createTexture(),D.info.memory.textures++),P.activeTexture(P.TEXTURE0+t),P.bindTexture(P.TEXTURE_2D,e.__webglTexture);var n=e.image,r=0===(n.width&n.width-1)&&0===(n.height&n.height-1),i=S(e.format),s=S(e.type);b(P.TEXTURE_2D,e,r),e instanceof THREE.DataTexture?P.texImage2D(P.TEXTURE_2D,0,i,n.width,n.height,0,i,s,n.data):P.texImage2D(P.TEXTURE_2D,0,i,i,s,e.image),e.generateMipmaps&&r&&P.generateMipmap(P.TEXTURE_2D),e.needsUpdate=!1,e.onUpdate&&e.onUpdate()}else P.activeTexture(P.TEXTURE0+t),P.bindTexture(P.TEXTURE_2D,e.__webglTexture)},this.setRenderTarget=function(e){var t=e instanceof THREE.WebGLRenderTargetCube;if(e&&!e.__webglFramebuffer){void 0===e.depthBuffer&&(e.depthBuffer=!0),void 0===e.stencilBuffer&&(e.stencilBuffer=!0),e.__webglTexture=P.createTexture();var n=0===(e.width&e.width-1)&&0===(e.height&e.height-1),r=S(e.format),i=S(e.type);if(t){e.__webglFramebuffer=[],e.__webglRenderbuffer=[],P.bindTexture(P.TEXTURE_CUBE_MAP,e.__webglTexture),b(P.TEXTURE_CUBE_MAP,e,n);for(n=0;6>n;n++){e.__webglFramebuffer[n]=P.createFramebuffer(),e.__webglRenderbuffer[n]=P.createRenderbuffer(),P.texImage2D(P.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,r,e.width,e.height,0,r,i,null);var s=e,o=P.TEXTURE_CUBE_MAP_POSITIVE_X+n;P.bindFramebuffer(P.FRAMEBUFFER,e.__webglFramebuffer[n]),P.framebufferTexture2D(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,o,s.__webglTexture,0),w(e.__webglRenderbuffer[n],e)}}else e.__webglFramebuffer=P.createFramebuffer(),e.__webglRenderbuffer=P.createRenderbuffer(),P.bindTexture(P.TEXTURE_2D,e.__webglTexture),b(P.TEXTURE_2D,e,n),P.texImage2D(P.TEXTURE_2D,0,r,e.width,e.height,0,r,i,null),r=P.TEXTURE_2D,P.bindFramebuffer(P.FRAMEBUFFER,e.__webglFramebuffer),P.framebufferTexture2D(P.FRAMEBUFFER,P.COLOR_ATTACHMENT0,r,e.__webglTexture,0),w(e.__webglRenderbuffer,e);t?P.bindTexture(P.TEXTURE_CUBE_MAP,null):P.bindTexture(P.TEXTURE_2D,null),P.bindRenderbuffer(P.RENDERBUFFER,null),P.bindFramebuffer(P.FRAMEBUFFER,null)}e?(t=t?e.__webglFramebuffer[e.activeCubeFace]:e.__webglFramebuffer,r=e.width,e=e.height,n=i=0):(t=null,r=Z,e=et,i=G,n=Y),t!==j&&(P.bindFramebuffer(P.FRAMEBUFFER,t),P.viewport(i,n,r,e),j=t),tt=r,nt=e},this.shadowMapPlugin=new THREE.ShadowMapPlugin,this.addPrePlugin(this.shadowMapPlugin),this.addPostPlugin(new THREE.SpritePlugin),this.addPostPlugin(new THREE.LensFlarePlugin)},THREE.WebGLRenderTarget=function(e,t,n){this.width=e,this.height=t,n=n||{},this.wrapS=void 0!==n.wrapS?n.wrapS:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==n.wrapT?n.wrapT:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==n.magFilter?n.magFilter:THREE.LinearFilter,this.minFilter=void 0!==n.minFilter?n.minFilter:THREE.LinearMipMapLinearFilter,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.format=void 0!==n.format?n.format:THREE.RGBAFormat,this.type=void 0!==n.type?n.type:THREE.UnsignedByteType,this.depthBuffer=void 0!==n.depthBuffer?n.depthBuffer:!0,this.stencilBuffer=void 0!==n.stencilBuffer?n.stencilBuffer:!0,this.generateMipmaps=!0},THREE.WebGLRenderTarget.prototype.clone=function(){var e=new THREE.WebGLRenderTarget(this.width,this.height);return e.wrapS=this.wrapS,e.wrapT=this.wrapT,e.magFilter=this.magFilter,e.minFilter=this.minFilter,e.offset.copy(this.offset),e.repeat.copy(this.repeat),e.format=this.format,e.type=this.type,e.depthBuffer=this.depthBuffer,e.stencilBuffer=this.stencilBuffer,e},THREE.WebGLRenderTargetCube=function(e,t,n){THREE.WebGLRenderTarget.call(this,e,t,n),this.activeCubeFace=0},THREE.WebGLRenderTargetCube.prototype=new THREE.WebGLRenderTarget,THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube,THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3,this.positionScreen=new THREE.Vector4,this.visible=!0},THREE.RenderableVertex.prototype.copy=function(e){this.positionWorld.copy(e.positionWorld),this.positionScreen.copy(e.positionScreen)},THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex,this.v2=new THREE.RenderableVertex,this.v3=new THREE.RenderableVertex,this.centroidWorld=new THREE.Vector3,this.centroidScreen=new THREE.Vector3,this.normalWorld=new THREE.Vector3,this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3],this.faceMaterial=this.material=null,this.uvs=[[]],this.z=null},THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex,this.v2=new THREE.RenderableVertex,this.v3=new THREE.RenderableVertex,this.v4=new THREE.RenderableVertex,this.centroidWorld=new THREE.Vector3,this.centroidScreen=new THREE.Vector3,this.normalWorld=new THREE.Vector3,this.vertexNormalsWorld=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3],this.faceMaterial=this.material=null,this.uvs=[[]],this.z=null},THREE.RenderableObject=function(){this.z=this.object=null},THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=null,this.scale=new THREE.Vector2,this.material=null},THREE.RenderableLine=function(){this.z=null,this.v1=new THREE.RenderableVertex,this.v2=new THREE.RenderableVertex,this.material=null},THREE.BufferGeometry=function(){this.id=THREE.GeometryCount++,this.vertexColorArray=this.vertexUvArray=this.vertexNormalArray=this.vertexPositionArray=this.vertexIndexArray=this.vertexColorBuffer=this.vertexUvBuffer=this.vertexNormalBuffer=this.vertexPositionBuffer=this.vertexIndexBuffer=null,this.dynamic=!1,this.boundingSphere=this.boundingBox=null,this.morphTargets=[]},THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,computeBoundingBox:function(){},computeBoundingSphere:function(){}},THREE.Gyroscope=function(){THREE.Object3D.call(this)},THREE.Gyroscope.prototype=new THREE.Object3D,THREE.Gyroscope.prototype.constructor=THREE.Gyroscope,THREE.Gyroscope.prototype.updateMatrixWorld=function(e){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||e)this.parent?(this.matrixWorld.multiply(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0;for(var t=0,n=this.children.length;t<n;t++)this.children[t].updateMatrixWorld(e)},THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3,THREE.Gyroscope.prototype.translationObject=new THREE.Vector3,THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion,THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion,THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3,THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3,THREE.CameraHelper=function(e){function t(e,t,r){n(e,r),n(t,r)}function n(e,t){r.lineGeometry.vertices.push(new THREE.Vertex(new THREE.Vector3)),r.lineGeometry.colors.push(new THREE.Color(t)),void 0===r.pointMap[e]&&(r.pointMap[e]=[]),r.pointMap[e].push(r.lineGeometry.vertices.length-1)}THREE.Object3D.call(this);var r=this;this.lineGeometry=new THREE.Geometry,this.lineMaterial=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),this.pointMap={},t("n1","n2",16755200),t("n2","n4",16755200),t("n4","n3",16755200),t("n3","n1",16755200),t("f1","f2",16755200),t("f2","f4",16755200),t("f4","f3",16755200),t("f3","f1",16755200),t("n1","f1",16755200),t("n2","f2",16755200),t("n3","f3",16755200),t("n4","f4",16755200),t("p","n1",16711680),t("p","n2",16711680),t("p","n3",16711680),t("p","n4",16711680),t("u1","u2",43775),t("u2","u3",43775),t("u3","u1",43775),t("c","t",16777215),t("p","c",3355443),t("cn1","cn2",3355443),t("cn3","cn4",3355443),t("cf1","cf2",3355443),t("cf3","cf4",3355443),this.update(e),this.lines=new THREE.Line(this.lineGeometry,this.lineMaterial,THREE.LinePieces),this.add(this.lines)},THREE.CameraHelper.prototype=new THREE.Object3D,THREE.CameraHelper.prototype.constructor=THREE.CameraHelper,THREE.CameraHelper.prototype.update=function(e){function t(e,t,r,i){THREE.CameraHelper.__v.set(t,r,i),THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c),e=n.pointMap[e];if(void 0!==e){t=0;for(r=e.length;t<r;t++)n.lineGeometry.vertices[e[t]].position.copy(THREE.CameraHelper.__v)}}var n=this;THREE.CameraHelper.__c.projectionMatrix.copy(e.projectionMatrix),t("c",0,0,-1),t("t",0,0,1),t("n1",-1,-1,-1),t("n2",1,-1,-1),t("n3",-1,1,-1),t("n4",1,1,-1),t("f1",-1,-1,1),t("f2",1,-1,1),t("f3",-1,1,1),t("f4",1,1,1),t("u1",.7,1.1,-1),t("u2",-0.7,1.1,-1),t("u3",0,2,-1),t("cf1",-1,0,1),t("cf2",1,0,1),t("cf3",0,-1,1),t("cf4",0,1,1),t("cn1",-1,0,-1),t("cn2",1,0,-1),t("cn3",0,-1,-1),t("cn4",0,1,-1),this.lineGeometry.__dirtyVertices=!0},THREE.CameraHelper.__projector=new THREE.Projector,THREE.CameraHelper.__v=new THREE.Vector3,THREE.CameraHelper.__c=new THREE.Camera,THREE.LensFlare=function(e,t,n,r,i){THREE.Object3D.call(this),this.lensFlares=[],this.positionScreen=new THREE.Vector3,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,t,n,r,i)},THREE.LensFlare.prototype=new THREE.Object3D,THREE.LensFlare.prototype.constructor=THREE.LensFlare,THREE.LensFlare.prototype.supr=THREE.Object3D.prototype,THREE.LensFlare.prototype.add=function(e,t,n,r,i,s){void 0===t&&(t=-1),void 0===n&&(n=0),void 0===s&&(s=1),void 0===i&&(i=new THREE.Color(16777215)),void 0===r&&(r=THREE.NormalBlending),n=Math.min(n,Math.max(0,n)),this.lensFlares.push({texture:e,size:t,distance:n,x:0,y:0,z:0,scale:1,rotation:1,opacity:s,color:i,blending:r})},THREE.LensFlare.prototype.updateLensFlares=function(){var e,t=this.lensFlares.length,n,r=2*-this.positionScreen.x,i=2*-this.positionScreen.y;for(e=0;e<t;e++)n=this.lensFlares[e],n.x=this.positionScreen.x+r*n.distance,n.y=this.positionScreen.y+i*n.distance,n.wantedRotation=.25*n.x*Math.PI,n.rotation+=.25*(n.wantedRotation-n.rotation)},THREE.MarchingCubes=function(e,t){THREE.Object3D.call(this),this.material=t,this.init=function(e){this.resolution=e,this.isolation=80,this.size=e,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(3*this.size3),this.vlist=new Float32Array(36),this.nlist=new Float32Array(36),this.firstDraw=!0,this.maxCount=4096,this.count=0,this.hasNormal=this.hasPos=!1,this.positionArray=new Float32Array(3*this.maxCount),this.normalArray=new Float32Array(3*this.maxCount)},this.lerp=function(e,t,n){return e+(t-e)*n},this.VIntX=function(e,t,n,r,i,s,o,u,a,f){i=(i-a)/(f-a),a=this.normal_cache,t[r]=s+i*this.delta,t[r+1]=o,t[r+2]=u,n[r]=this.lerp(a[e],a[e+3],i),n[r+1]=this.lerp(a[e+1],a[e+4],i),n[r+2]=this.lerp(a[e+2],a[e+5],i)},this.VIntY=function(e,t,n,r,i,s,o,u,a,f){i=(i-a)/(f-a),a=this.normal_cache,t[r]=s,t[r+1]=o+i*this.delta,t[r+2]=u,t=e+3*this.yd,n[r]=this.lerp(a[e],a[t],i),n[r+1]=this.lerp(a[e+1],a[t+1],i),n[r+2]=this.lerp(a[e+2],a[t+2],i)},this.VIntZ=function(e,t,n,r,i,s,o,u,a,f){i=(i-a)/(f-a),a=this.normal_cache,t[r]=s,t[r+1]=o,t[r+2]=u+i*this.delta,t=e+3*this.zd,n[r]=this.lerp(a[e],a[t],i),n[r+1]=this.lerp(a[e+1],a[t+1],i),n[r+2]=this.lerp(a[e+2],a[t+2],i)},this.compNorm=function(e){var t=3*e;0===this.normal_cache[t]&&(this.normal_cache[t]=this.field[e-1]-this.field[e+1],this.normal_cache[t+1]=this.field[e-this.yd]-this.field[e+this.yd],this.normal_cache[t+2]=this.field[e-this.zd]-this.field[e+this.zd])},this.polygonize=function(e,t,n,r,i,s){var o=r+1,u=r+this.yd,a=r+this.zd,f=o+this.yd,l=o+this.zd,c=r+this.yd+this.zd,h=o+this.yd+this.zd,p=0,d=this.field[r],v=this.field[o],m=this.field[u],g=this.field[f],y=this.field[a],b=this.field[l],w=this.field[c],E=this.field[h];d<i&&(p|=1),v<i&&(p|=2),m<i&&(p|=8),g<i&&(p|=4),y<i&&(p|=16),b<i&&(p|=32),w<i&&(p|=128),E<i&&(p|=64);var S=THREE.edgeTable[p];if(0===S)return 0;var x=this.delta,T=e+x,N=t+x,x=n+x;S&1&&(this.compNorm(r),this.compNorm(o),this.VIntX(3*r,this.vlist,this.nlist,0,i,e,t,n,d,v)),S&2&&(this.compNorm(o),this.compNorm(f),this.VIntY(3*o,this.vlist,this.nlist,3,i,T,t,n,v,g)),S&4&&(this.compNorm(u),this.compNorm(f),this.VIntX(3*u,this.vlist,this.nlist,6,i,e,N,n,m,g)),S&8&&(this.compNorm(r),this.compNorm(u),this.VIntY(3*r,this.vlist,this.nlist,9,i,e,t,n,d,m)),S&16&&(this.compNorm(a),this.compNorm(l),this.VIntX(3*a,this.vlist,this.nlist,12,i,e,t,x,y,b)),S&32&&(this.compNorm(l),this.compNorm(h),this.VIntY(3*l,this.vlist,this.nlist,15,i,T,t,x,b,E)),S&64&&(this.compNorm(c),this.compNorm(h),this.VIntX(3*c,this.vlist,this.nlist,18,i,e,N,x,w,E)),S&128&&(this.compNorm(a),this.compNorm(c),this.VIntY(3*a,this.vlist,this.nlist,21,i,e,t,x,y,w)),S&256&&(this.compNorm(r),this.compNorm(a),this.VIntZ(3*r,this.vlist,this.nlist,24,i,e,t,n,d,y)),S&512&&(this.compNorm(o),this.compNorm(l),this.VIntZ(3*o,this.vlist,this.nlist,27,i,T,t,n,v,b)),S&1024&&(this.compNorm(f),this.compNorm(h),this.VIntZ(3*f,this.vlist,this.nlist,30,i,T,N,n,g,E)),S&2048&&(this.compNorm(u),this.compNorm(c),this.VIntZ(3*u,this.vlist,this.nlist,33,i,e,N,n,m,w)),p<<=4;for(i=r=0;-1!=THREE.triTable[p+i];)e=p+i,t=e+1,n=e+2,this.posnormtriv(this.vlist,this.nlist,3*THREE.triTable[e],3*THREE.triTable[t],3*THREE.triTable[n],s),i+=3,r++;return r},this.posnormtriv=function(e,t,n,r,i,s){var o=3*this.count;this.positionArray[o]=e[n],this.positionArray[o+1]=e[n+1],this.positionArray[o+2]=e[n+2],this.positionArray[o+3]=e[r],this.positionArray[o+4]=e[r+1],this.positionArray[o+5]=e[r+2],this.positionArray[o+6]=e[i],this.positionArray[o+7]=e[i+1],this.positionArray[o+8]=e[i+2],this.normalArray[o]=t[n],this.normalArray[o+1]=t[n+1],this.normalArray[o+2]=t[n+2],this.normalArray[o+3]=t[r],this.normalArray[o+4]=t[r+1],this.normalArray[o+5]=t[r+2],this.normalArray[o+6]=t[i],this.normalArray[o+7]=t[i+1],this.normalArray[o+8]=t[i+2],this.hasNormal=this.hasPos=!0,this.count+=3,this.count>=this.maxCount-3&&s(this)},this.begin=function(){this.count=0,this.hasNormal=this.hasPos=!1},this.end=function(e){if(0!==this.count){for(var t=3*this.count;t<this.positionArray.length;t++)this.positionArray[t]=0;e(this)}},this.addBall=function(e,t,n,r,i){var s=this.size*Math.sqrt(r/i),o=n*this.size,u=t*this.size,a=e*this.size,f=Math.floor(o-s);1>f&&(f=1),o=Math.floor(o+s),o>this.size-1&&(o=this.size-1);var l=Math.floor(u-s);1>l&&(l=1),u=Math.floor(u+s),u>this.size-1&&(u=this.size-1);var c=Math.floor(a-s);1>c&&(c=1),s=Math.floor(a+s),s>this.size-1&&(s=this.size-1);for(var h,p,d,v,m,g,y,a=f;a<o;a++){d=this.size2*a,m=a/this.size-n,g=m*m;for(f=l;f<u;f++){p=d+this.size*f,h=f/this.size-t,y=h*h;for(h=c;h<s;h++)v=h/this.size-e,v=r/(1e-6+v*v+y+g)-i,0<v&&(this.field[p+h]+=v)}}},this.addPlaneX=function(e,t){var n,r,i,s,o,u=this.size,a=this.yd,f=this.zd,l=this.field,c=u*Math.sqrt(e/t);c>u&&(c=u);for(n=0;n<c;n++)if(r=n/u,r*=r,s=e/(1e-4+r)-t,0<s)for(r=0;r<u;r++){o=n+r*a;for(i=0;i<u;i++)l[f*i+o]+=s}},this.addPlaneY=function(e,t){var n,r,i,s,o,u,a=this.size,f=this.yd,l=this.zd,c=this.field,h=a*Math.sqrt(e/t);h>a&&(h=a);for(r=0;r<h;r++)if(n=r/a,n*=n,s=e/(1e-4+n)-t,0<s){o=r*f;for(n=0;n<a;n++){u=o+n;for(i=0;i<a;i++)c[l*i+u]+=s}}},this.addPlaneZ=function(e,t){var n,r,i,s,o,u,a=this.size,f=this.yd,l=this.zd,c=this.field,h=a*Math.sqrt(e/t);h>a&&(h=a);for(i=0;i<h;i++)if(n=i/a,n*=n,s=e/(1e-4+n)-t,0<s){o=l*i;for(r=0;r<a;r++){u=o+r*f;for(n=0;n<a;n++)c[u+n]+=s}}},this.reset=function(){var e;for(e=0;e<this.size3;e++)this.normal_cache[3*e]=0,this.field[e]=0},this.render=function(e){this.begin();var t,n,r,i,s,o,u,a,f,l=this.size-2;for(i=1;i<l;i++){f=this.size2*i,u=(i-this.halfsize)/this.halfsize;for(r=1;r<l;r++){a=f+this.size*r,o=(r-this.halfsize)/this.halfsize;for(n=1;n<l;n++)s=(n-this.halfsize)/this.halfsize,t=a+n,this.polygonize(s,o,u,t,this.isolation,e)}}this.end(e)},this.generateGeometry=function(){var e=0,t=new THREE.Geometry,n=[];return this.render(function(r){var i,s,o,u,f,l,c,h;for(i=0;i<r.count;i++)c=3*i,f=c+1,h=c+2,s=r.positionArray[c],o=r.positionArray[f],u=r.positionArray[h],l=new THREE.Vector3(s,o,u),s=r.normalArray[c],o=r.normalArray[f],u=r.normalArray[h],c=new THREE.Vector3(s,o,u),c.normalize(),f=new THREE.Vertex(l),t.vertices.push(f),n.push(c);l=r.count/3;for(i=0;i<l;i++)c=3*(e+i),f=c+1,h=c+2,s=n[c],o=n[f],u=n[h],c=new THREE.Face3(c,f,h,[s,o,u]),t.faces.push(c);e+=l,r.count=0}),t},this.init(e)},THREE.MarchingCubes.prototype=new THREE.Object3D,THREE.MarchingCubes.prototype.constructor=THREE.MarchingCubes,THREE.edgeTable=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),THREE.triTable=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),THREE.LensFlarePlugin=function(){function e(e){var n=t.createProgram(),r=t.createShader(t.FRAGMENT_SHADER),i=t.createShader(t.VERTEX_SHADER);return t.shaderSource(r,e.fragmentShader),t.shaderSource(i,e.vertexShader),t.compileShader(r),t.compileShader(i),t.attachShader(n,r),t.attachShader(n,i),t.linkProgram(n),n}var t,n,r,i,s,o,u,a,f,l,c,h,p;this.init=function(v){t=v.context,n=v,r=new Float32Array(16),i=new Uint16Array(6),v=0,r[v++]=-1,r[v++]=-1,r[v++]=0,r[v++]=0,r[v++]=1,r[v++]=-1,r[v++]=1,r[v++]=0,r[v++]=1,r[v++]=1,r[v++]=1,r[v++]=1,r[v++]=-1,r[v++]=1,r[v++]=0,r[v++]=1,v=0,i[v++]=0,i[v++]=1,i[v++]=2,i[v++]=0,i[v++]=2,i[v++]=3,s=t.createBuffer(),o=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,r,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.STATIC_DRAW),u=t.createTexture(),a=t.createTexture(),t.bindTexture(t.TEXTURE_2D,u),t.texImage2D(t.TEXTURE_2D,0,t.RGB,16,16,0,t.RGB,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,16,16,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),0>=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(f=!1,l=e(THREE.ShaderFlares.lensFlare)):(f=!0,l=e(THREE.ShaderFlares.lensFlareVertexTexture)),c={},h={},c.vertex=t.getAttribLocation(l,"position"),c.uv=t.getAttribLocation(l,"uv"),h.renderType=t.getUniformLocation(l,"renderType"),h.map=t.getUniformLocation(l,"map"),h.occlusionMap=t.getUniformLocation(l,"occlusionMap"),h.opacity=t.getUniformLocation(l,"opacity"),h.color=t.getUniformLocation(l,"color"),h.scale=t.getUniformLocation(l,"scale"),h.rotation=t.getUniformLocation(l,"rotation"),h.screenPosition=t.getUniformLocation(l,"screenPosition"),p=!1},this.render=function(e,r,i,d){var e=e.__webglFlares,v=e.length;if(v){var y=new THREE.Vector3,w=d/i,E=.5*i,S=.5*d,x=16/d,T=new THREE.Vector2(x*w,x),N=new THREE.Vector3(1,1,0),C=new THREE.Vector2(1,1),L=h,x=c;t.useProgram(l),p||(t.enableVertexAttribArray(c.vertex),t.enableVertexAttribArray(c.uv),p=!0),t.uniform1i(L.occlusionMap,0),t.uniform1i(L.map,1),t.bindBuffer(t.ARRAY_BUFFER,s),t.vertexAttribPointer(x.vertex,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(x.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o),t.disable(t.CULL_FACE),t.depthMask(!1);var A,O,M,_,D;for(A=0;A<v;A++)if(x=16/d,T.set(x*w,x),_=e[A],y.set(_.matrixWorld.n14,_.matrixWorld.n24,_.matrixWorld.n34),r.matrixWorldInverse.multiplyVector3(y),r.projectionMatrix.multiplyVector3(y),N.copy(y),C.x=N.x*E+E,C.y=N.y*S+S,f||0<C.x&&C.x<i&&0<C.y&&C.y<d){t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,u),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGB,C.x-8,C.y-8,16,16,0),t.uniform1i(L.renderType,0),t.uniform2f(L.scale,T.x,T.y),t.uniform3f(L.screenPosition,N.x,N.y,N.z),t.disable(t.BLEND),t.enable(t.DEPTH_TEST),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,a),t.copyTexImage2D(t.TEXTURE_2D,0,t.RGBA,C.x-8,C.y-8,16,16,0),t.uniform1i(L.renderType,1),t.disable(t.DEPTH_TEST),t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,u),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),_.positionScreen.copy(N),_.customUpdateCallback?_.customUpdateCallback(_):_.updateLensFlares(),t.uniform1i(L.renderType,2),t.enable(t.BLEND);for(O=0,M=_.lensFlares.length;O<M;O++)if(D=_.lensFlares[O],.001<D.opacity&&.001<D.scale)N.x=D.x,N.y=D.y,N.z=D.z,x=D.size*D.scale/d,T.x=x*w,T.y=x,t.uniform3f(L.screenPosition,N.x,N.y,N.z),t.uniform2f(L.scale,T.x,T.y),t.uniform1f(L.rotation,D.rotation),t.uniform1f(L.opacity,D.opacity),t.uniform3f(L.color,D.color.r,D.color.g,D.color.b),n.setBlending(D.blending),n.setTexture(D.texture,1),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}t.enable(t.CULL_FACE),t.enable(t.DEPTH_TEST),t.depthMask(!0)}}},THREE.ShadowMapPlugin=function(){var e,t,n,r,i=new THREE.Frustum,s=new THREE.Matrix4,o=new THREE.Vector3,u=new THREE.Vector3;this.init=function(i){e=i.context,t=i;var i=THREE.ShaderLib.depthRGBA,s=THREE.UniformsUtils.clone(i.uniforms);n=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:s}),r=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:s,morphTargets:!0}),n._shadowPass=!0,r._shadowPass=!0},this.render=function(e,n){t.shadowMapEnabled&&t.shadowMapAutoUpdate&&this.update(e,n)},this.update=function(f,l){var p,v,m,y,w,E,S,x,T,N=[];y=0,e.clearColor(1,1,1,1),e.disable(e.BLEND),t.shadowMapCullFrontFaces&&e.cullFace(e.FRONT),t.setDepthTest(!0);for(p=0,v=f.__lights.length;p<v;p++)if(m=f.__lights[p],m.castShadow)if(m instanceof THREE.DirectionalLight&&m.shadowCascade)for(w=0;w<m.shadowCascadeCount;w++){var C;if(m.shadowCascadeArray[w])C=m.shadowCascadeArray[w];else{T=m,S=w,C=new THREE.DirectionalLight,C.isVirtual=!0,C.onlyShadow=!0,C.castShadow=!0,C.shadowCameraNear=T.shadowCameraNear,C.shadowCameraFar=T.shadowCameraFar,C.shadowCameraLeft=T.shadowCameraLeft,C.shadowCameraRight=T.shadowCameraRight,C.shadowCameraBottom=T.shadowCameraBottom,C.shadowCameraTop=T.shadowCameraTop,C.shadowCameraVisible=T.shadowCameraVisible,C.shadowDarkness=T.shadowDarkness,C.shadowBias=T.shadowCascadeBias[S],C.shadowMapWidth=T.shadowCascadeWidth[S],C.shadowMapHeight=T.shadowCascadeHeight[S],C.pointsWorld=[],C.pointsFrustum=[],x=C.pointsWorld,E=C.pointsFrustum;for(var k=0;8>k;k++)x[k]=new THREE.Vector3,E[k]=new THREE.Vector3;x=T.shadowCascadeNearZ[S],T=T.shadowCascadeFarZ[S],E[0].set(-1,-1,x),E[1].set(1,-1,x),E[2].set(-1,1,x),E[3].set(1,1,x),E[4].set(-1,-1,T),E[5].set(1,-1,T),E[6].set(-1,1,T),E[7].set(1,1,T),C.originalCamera=l,E=new THREE.Gyroscope,E.position=m.shadowCascadeOffset,E.add(C),E.add(C.target),l.add(E),m.shadowCascadeArray[w]=C,console.log("Created virtualLight",C)}S=m,x=w,T=S.shadowCascadeArray[x],T.position.copy(S.position),T.target.position.copy(S.target.position),T.lookAt(T.target),T.shadowCameraVisible=S.shadowCameraVisible,T.shadowDarkness=S.shadowDarkness,T.shadowBias=S.shadowCascadeBias[x],E=S.shadowCascadeNearZ[x],S=S.shadowCascadeFarZ[x],T=T.pointsFrustum,T[0].z=E,T[1].z=E,T[2].z=E,T[3].z=E,T[4].z=S,T[5].z=S,T[6].z=S,T[7].z=S,N[y]=C,y++}else N[y]=m,y++;for(p=0,v=N.length;p<v;p++){m=N[p],m.shadowMap||(m.shadowMap=new THREE.WebGLRenderTarget(m.shadowMapWidth,m.shadowMapHeight,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),m.shadowMapSize=new THREE.Vector2(m.shadowMapWidth,m.shadowMapHeight),m.shadowMatrix=new THREE.Matrix4);if(!m.shadowCamera){if(m instanceof THREE.SpotLight)m.shadowCamera=new THREE.PerspectiveCamera(m.shadowCameraFov,m.shadowMapWidth/m.shadowMapHeight,m.shadowCameraNear,m.shadowCameraFar);else{if(!(m instanceof THREE.DirectionalLight)){console.error("Unsupported light type for shadow");continue}m.shadowCamera=new THREE.OrthographicCamera(m.shadowCameraLeft,m.shadowCameraRight,m.shadowCameraTop,m.shadowCameraBottom,m.shadowCameraNear,m.shadowCameraFar)}f.add(m.shadowCamera),t.autoUpdateScene&&f.updateMatrixWorld()}m.shadowCameraVisible&&!m.cameraHelper&&(m.cameraHelper=new THREE.CameraHelper(m.shadowCamera),m.shadowCamera.add(m.cameraHelper));if(m.isVirtual&&C.originalCamera==l){w=l,y=m.shadowCamera,E=m.pointsFrustum,T=m.pointsWorld,o.set(Infinity,Infinity,Infinity),u.set(-Infinity,-Infinity,-Infinity);for(S=0;8>S;S++)x=T[S],x.copy(E[S]),THREE.ShadowMapPlugin.__projector.unprojectVector(x,w),y.matrixWorldInverse.multiplyVector3(x),x.x<o.x&&(o.x=x.x),x.x>u.x&&(u.x=x.x),x.y<o.y&&(o.y=x.y),x.y>u.y&&(u.y=x.y),x.z<o.z&&(o.z=x.z),x.z>u.z&&(u.z=x.z);y.left=o.x,y.right=u.x,y.top=u.y,y.bottom=o.y,y.updateProjectionMatrix()}y=m.shadowMap,E=m.shadowMatrix,w=m.shadowCamera,w.position.copy(m.matrixWorld.getPosition()),w.lookAt(m.target.matrixWorld.getPosition()),w.updateMatrixWorld(),w.matrixWorldInverse.getInverse(w.matrixWorld),m.cameraHelper&&(m.cameraHelper.lines.visible=m.shadowCameraVisible),m.shadowCameraVisible&&m.cameraHelper.update(m.shadowCamera),E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiplySelf(w.projectionMatrix),E.multiplySelf(w.matrixWorldInverse),w._viewMatrixArray||(w._viewMatrixArray=new Float32Array(16)),w.matrixWorldInverse.flattenToArray(w._viewMatrixArray),w._projectionMatrixArray||(w._projectionMatrixArray=new Float32Array(16)),w.projectionMatrix.flattenToArray(w._projectionMatrixArray),s.multiply(w.projectionMatrix,w.matrixWorldInverse),i.setFromMatrix(s),t.setRenderTarget(y),t.clear(),T=f.__webglObjects;for(m=0,y=T.length;m<y;m++)if(S=T[m],E=S.object,S.render=!1,E.visible&&E.castShadow&&(!(E instanceof THREE.Mesh)||!E.frustumCulled||i.contains(E)))E.matrixWorld.flattenToArray(E._objectMatrixArray),E._modelViewMatrix.multiplyToArray(w.matrixWorldInverse,E.matrixWorld,E._modelViewMatrixArray),S.render=!0;for(m=0,y=T.length;m<y;m++)if(S=T[m],S.render)E=S.object,S=S.buffer,t.setObjectFaces(E),x=E.customDepthMaterial?E.customDepthMaterial:E.geometry.morphTargets.length?r:n,S instanceof THREE.BufferGeometry?t.renderBufferDirect(w,f.__lights,null,x,S,E):t.renderBuffer(w,f.__lights,null,x,S,E);T=f.__webglObjectsImmediate;for(m=0,y=T.length;m<y;m++)S=T[m],E=S.object,E.visible&&E.castShadow&&(E.matrixAutoUpdate&&E.matrixWorld.flattenToArray(E._objectMatrixArray),E._modelViewMatrix.multiplyToArray(w.matrixWorldInverse,E.matrixWorld,E._modelViewMatrixArray),t.renderImmediateObject(w,f.__lights,null,n,E))}p=t.getClearColor(),v=t.getClearAlpha(),e.clearColor(p.r,p.g,p.b,v),e.enable(e.BLEND),t.shadowMapCullFrontFaces&&e.cullFace(e.BACK)}},THREE.ShadowMapPlugin.__projector=new THREE.Projector,THREE.SpritePlugin=function(){function e(e,t){return t.z-e.z}var t,n,r,i,s,o,u,a,f,l;this.init=function(e){t=e.context,n=e,r=new Float32Array(16),i=new Uint16Array(6),e=0,r[e++]=-1,r[e++]=-1,r[e++]=0,r[e++]=1,r[e++]=1,r[e++]=-1,r[e++]=1,r[e++]=1,r[e++]=1,r[e++]=1,r[e++]=1,r[e++]=0,r[e++]=-1,r[e++]=1,r[e++]=0,e=r[e++]=0,i[e++]=0,i[e++]=1,i[e++]=2,i[e++]=0,i[e++]=2,i[e++]=3,s=t.createBuffer(),o=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,s),t.bufferData(t.ARRAY_BUFFER,r,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.STATIC_DRAW);var e=THREE.ShaderSprite.sprite,p=t.createProgram(),v=t.createShader(t.FRAGMENT_SHADER),y=t.createShader(t.VERTEX_SHADER);t.shaderSource(v,e.fragmentShader),t.shaderSource(y,e.vertexShader),t.compileShader(v),t.compileShader(y),t.attachShader(p,v),t.attachShader(p,y),t.linkProgram(p),u=p,a={},f={},a.position=t.getAttribLocation(u,"position"),a.uv=t.getAttribLocation(u,"uv"),f.uvOffset=t.getUniformLocation(u,"uvOffset"),f.uvScale=t.getUniformLocation(u,"uvScale"),f.rotation=t.getUniformLocation(u,"rotation"),f.scale=t.getUniformLocation(u,"scale"),f.alignment=t.getUniformLocation(u,"alignment"),f.color=t.getUniformLocation(u,"color"),f.map=t.getUniformLocation(u,"map"),f.opacity=t.getUniformLocation(u,"opacity"),f.useScreenCoordinates=t.getUniformLocation(u,"useScreenCoordinates"),f.affectedByDistance=t.getUniformLocation(u,"affectedByDistance"),f.screenPosition=t.getUniformLocation(u,"screenPosition"),f.modelViewMatrix=t.getUniformLocation(u,"modelViewMatrix"),f.projectionMatrix=t.getUniformLocation(u,"projectionMatrix"),l=!1},this.render=function(r,i,p,d){var r=r.__webglSprites,v=r.length;if(v){var y=a,w=f,E=d/p,p=.5*p,S=.5*d,x=!0;t.useProgram(u),l||(t.enableVertexAttribArray(y.position),t.enableVertexAttribArray(y.uv),l=!0),t.disable(t.CULL_FACE),t.enable(t.BLEND),t.depthMask(!0),t.bindBuffer(t.ARRAY_BUFFER,s),t.vertexAttribPointer(y.position,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(y.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o),t.uniformMatrix4fv(w.projectionMatrix,!1,i._projectionMatrixArray),t.activeTexture(t.TEXTURE0),t.uniform1i(w.map,0);for(var T,N=[],y=0;y<v;y++)if(T=r[y],T.visible&&0!==T.opacity)T.useScreenCoordinates?T.z=-T.position.z:(T._modelViewMatrix.multiplyToArray(i.matrixWorldInverse,T.matrixWorld,T._modelViewMatrixArray),T.z=-T._modelViewMatrix.n34);r.sort(e);for(y=0;y<v;y++)T=r[y],T.visible&&0!==T.opacity&&T.map&&T.map.image&&T.map.image.width&&(T.useScreenCoordinates?(t.uniform1i(w.useScreenCoordinates,1),t.uniform3f(w.screenPosition,(T.position.x-p)/p,(S-T.position.y)/S,Math.max(0,Math.min(1,T.position.z)))):(t.uniform1i(w.useScreenCoordinates,0),t.uniform1i(w.affectedByDistance,T.affectedByDistance?1:0),t.uniformMatrix4fv(w.modelViewMatrix,!1,T._modelViewMatrixArray)),i=T.map.image.width/(T.scaleByViewport?d:1),N[0]=i*E*T.scale.x,N[1]=i*T.scale.y,t.uniform2f(w.uvScale,T.uvScale.x,T.uvScale.y),t.uniform2f(w.uvOffset,T.uvOffset.x,T.uvOffset.y),t.uniform2f(w.alignment,T.alignment.x,T.alignment.y),t.uniform1f(w.opacity,T.opacity),t.uniform3f(w.color,T.color.r,T.color.g,T.color.b),t.uniform1f(w.rotation,T.rotation),t.uniform2fv(w.scale,N),T.mergeWith3D&&!x?(t.enable(t.DEPTH_TEST),x=!0):!T.mergeWith3D&&x&&(t.disable(t.DEPTH_TEST),x=!1),n.setBlending(T.blending),n.setTexture(T.map,0),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0));t.enable(t.CULL_FACE),t.enable(t.DEPTH_TEST),t.depthMask(!0)}}},THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}},THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",fragmentShader:"precision mediump float;\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n}"}}